#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.4 (swiftlang-1205.0.26.9 clang-1205.0.19.55)
#ifndef DOTFACECORE_SWIFT_H
#define DOTFACECORE_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Dispatch;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="DotFaceCore",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class DOTImageSize;
@class NSData;

/// Image with BGR888 pixel format.
SWIFT_CLASS_NAMED("BgrRawImage")
@interface DOTBgrRawImage : NSObject
/// Image size.
@property (nonatomic, readonly, strong) DOTImageSize * _Nonnull size;
/// Raw image data with BGR888 pixel format.
@property (nonatomic, copy) NSData * _Nonnull bytes;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Create <code>BgrRawImage</code> from raw image data with BGR888 pixel format.
- (nonnull instancetype)initWithBytes:(NSData * _Nonnull)bytes size:(DOTImageSize * _Nonnull)size;
@end



SWIFT_CLASS_NAMED("BgrRawImageFactory")
@interface DOTBgrRawImageFactory : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Return a copy of the <code>CGImage</code> as a <code>BgrRawImage</code>object.
/// \param cgImage Input image as a <code>CGImage</code> object.
///
///
/// returns:
/// New <code>BgrRawImage</code> instance.
+ (DOTBgrRawImage * _Nonnull)createWithCgImage:(CGImageRef _Nonnull)cgImage SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("CGImageFactory")
@interface DOTCGImageFactory : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Return a copy of the <code>BgrRawImage</code> as a <code>CGImage</code> object.
/// \param bgrRawImage Input image as a <code>BgrRawImage</code> object.
///
///
/// returns:
/// New <code>CGImage</code> instance.
+ (CGImageRef _Nonnull)createWithBgrRawImage:(DOTBgrRawImage * _Nonnull)bgrRawImage SWIFT_WARN_UNUSED_RESULT;
@end

/// Facing of the camera on the device.
typedef SWIFT_ENUM_NAMED(NSInteger, DOTCameraFacing, "CameraFacing", open) {
/// Front facing camera.
  DOTCameraFacingFront = 0,
/// Back facing camera.
  DOTCameraFacingBack = 1,
};

/// Indicates how the layer displays video frames.
typedef SWIFT_ENUM_NAMED(NSInteger, DOTCameraPreviewScaleType, "CameraPreviewScaleType", open) {
/// Entire video frame is displayed. Video frame is centered and fits within the preview layer bounds.
/// The preview layer may contain empty vertical or horizontal regions. This is recommended configuration, becuase it maximizes resolution of images captured during an auto capture process.
  DOTCameraPreviewScaleTypeFit = 0,
/// Entire preview layer is filled with video frame content. Video frame is centered and may extend beyond the preview layer bounds.
/// This configuration may produce images with lower resolution (compared to <code>fit</code> case) during an auto capture process.
  DOTCameraPreviewScaleTypeFill = 1,
};

typedef SWIFT_ENUM_NAMED(NSInteger, DOTCaptureStepId, "CaptureStepId", open) {
  DOTCaptureStepIdPresence = 0,
  DOTCaptureStepIdPosition = 1,
  DOTCaptureStepIdProximity = 2,
  DOTCaptureStepIdGlassStatus = 3,
  DOTCaptureStepIdBackgroundUniformity = 4,
  DOTCaptureStepIdPitchAngle = 5,
  DOTCaptureStepIdYawAngle = 6,
  DOTCaptureStepIdEyeStatus = 7,
  DOTCaptureStepIdMouthStatus = 8,
  DOTCaptureStepIdLight = 9,
  DOTCaptureStepIdMask = 10,
};

enum DOTQualityAttributeId : NSInteger;
@class DOTQualityAttribute;

/// This class contains default <code>QualityAttribute</code> for every <code>QualityAttributeId</code>.
SWIFT_CLASS_NAMED("DefaultQualityAttributeRegistry")
@interface DOTDefaultQualityAttributeRegistry : NSObject
/// Returns default <code>QualityAttribute</code> for <code>QualityAttributeId</code>.
- (DOTQualityAttribute * _Nonnull)findById:(enum DOTQualityAttributeId)qualityAttributeId SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSNumber;
@class DOTTemplate;
@class DOTFaceQuality;
@class DOTFaceQualityQuery;
@class DOTFaceAttribute;
@class DOTFaceAspects;

/// Result of face detection or face auto capture process.
SWIFT_CLASS_NAMED("DetectedFace")
@interface DOTDetectedFace : NSObject
/// Original input image.
@property (nonatomic, readonly, strong) DOTBgrRawImage * _Nonnull image;
/// Face detection confidence score.
@property (nonatomic, readonly) double confidence;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Create face template.
/// This method requires <code>DotFaceVerification</code> module to be active. This method should be called on the background thread.
- (DOTTemplate * _Nullable)createTemplateAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Returns ICAO Full Frontal face image.
/// If bounding box overlaps the image, white background is added to overlapping part. This method should be called on the background thread.
- (DOTBgrRawImage * _Nullable)createFullFrontalImageAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Evaluation of all available face quality attributes.
/// This method should be called on the background thread.
- (DOTFaceQuality * _Nullable)evaluateFaceQualityAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Evaluation of specific set of face quality attributes.
/// If you want to evaluate background uniformity, you need <code>DotFaceBackgroundUniformity</code> module to be active.  This method should be called on the background thread.
- (DOTFaceQuality * _Nullable)evaluateFaceQualityWithFaceQualityQuery:(DOTFaceQualityQuery * _Nonnull)faceQualityQuery error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Evaluation of passive liveness.
/// This method requires <code>DotFacePassiveLiveness</code> module to be active. This method should be called on the background thread.
- (DOTFaceAttribute * _Nullable)evaluatePassiveLivenessAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Evaluation of face aspects.
/// This method should be called on the background thread.
- (DOTFaceAspects * _Nullable)evaluateFaceAspectsAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end

@class NSString;
@protocol DotFaceDelegate;
@class DotFaceConfiguration;

/// Class responsible for <code>DotFace</code> framework life cycle.
SWIFT_CLASS("_TtC11DotFaceCore7DotFace")
@interface DotFace : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) DotFace * _Nonnull shared;)
+ (DotFace * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// <code>DotFace</code> framework version.
@property (nonatomic, readonly, copy) NSString * _Nonnull versionName;
/// License ID used for generating license file.
@property (nonatomic, readonly, copy) NSString * _Nonnull licenseId;
/// Flag describing initialization state of <code>DotFace</code> framework.
/// It is safe to access this property only after you have received the delegate callback notifying you that the initialization/deinitialization process has finished.
@property (nonatomic, readonly) BOOL isInitialized;
/// Set delegate and <code>DispatchQueue</code> on which you want to recieve the delegate callbacks. <code>DotFace</code> will hold weak reference to <code>delegate</code> and <code>queue</code>.
- (void)setDelegate:(id <DotFaceDelegate> _Nullable)delegate queue:(dispatch_queue_t _Nullable)queue;
/// This method will initialize <code>DotFace</code> framework asynchronously and it will fire delegate callback after it will finish.
/// \param configuration This parameter specifies how <code>DotFace</code> framework should be configured.
///
- (void)initializeWithConfiguration:(DotFaceConfiguration * _Nonnull)configuration;
/// This method will deinitialize <code>DotFace</code> framework and free up allocated memory asynchronously. This method will fire delegate callback after it will finish.
- (void)deinitialize;
@end

enum DotFaceResultCode : NSInteger;

SWIFT_CLASS_NAMED("Result")
@interface DotFaceResult : NSObject
@property (nonatomic, readonly) enum DotFaceResultCode code;
@property (nonatomic, readonly) NSError * _Nullable error;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithCode:(enum DotFaceResultCode)code error:(NSError * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, DotFaceResultCode, "Code", open) {
  DotFaceResultCodeOk = 0,
  DotFaceResultCodeError = 1,
};


@protocol DotFaceModule;

/// Use this to configure <code>DotFace</code> framework.
SWIFT_CLASS("_TtC11DotFaceCore20DotFaceConfiguration")
@interface DotFaceConfiguration : NSObject
/// Raw licensing data.
@property (nonatomic, readonly, copy) NSData * _Nonnull license;
/// List of modules to load during initialization.
@property (nonatomic, readonly, copy) NSArray<id <DotFaceModule>> * _Nonnull modules;
/// Face detection confidence threshold, value in range [0.0, 1.0]. Default is 0.06.
@property (nonatomic, readonly) double faceDetectionConfidenceThreshold;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithLicense:(NSData * _Nonnull)license modules:(NSArray<id <DotFaceModule>> * _Nonnull)modules;
- (nullable instancetype)initWithLicense:(NSData * _Nonnull)license modules:(NSArray<id <DotFaceModule>> * _Nonnull)modules faceDetectionConfidenceThreshold:(double)faceDetectionConfidenceThreshold error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP11DotFaceCore15DotFaceDelegate_")
@protocol DotFaceDelegate
- (void)dotFaceInitializationFinished:(DotFace * _Nonnull)dotFace result:(DotFaceResult * _Nonnull)result;
- (void)dotFaceDeinitializationFinished:(DotFace * _Nonnull)dotFace result:(DotFaceResult * _Nonnull)result;
@end

enum DotFaceModuleId : NSInteger;
@class DotFaceModuleCategoryWrapper;
@class NSURL;

SWIFT_PROTOCOL("_TtP11DotFaceCore13DotFaceModule_")
@protocol DotFaceModule
@property (nonatomic, readonly, copy) NSString * _Nonnull versionName;
@property (nonatomic, readonly) enum DotFaceModuleId moduleId;
@property (nonatomic, readonly, copy) NSArray<DotFaceModuleCategoryWrapper *> * _Nonnull dependencies;
@property (nonatomic, readonly, copy) NSURL * _Nonnull modelsUrl;
@end

typedef SWIFT_ENUM(NSInteger, DotFaceModuleCategory, open) {
  DotFaceModuleCategoryDetection = 0,
  DotFaceModuleCategoryVerification = 1,
  DotFaceModuleCategoryEyeGazeLiveness = 2,
  DotFaceModuleCategoryPassiveLiveness = 3,
  DotFaceModuleCategoryBackgroundUniformity = 4,
};


SWIFT_CLASS("_TtC11DotFaceCore28DotFaceModuleCategoryWrapper")
@interface DotFaceModuleCategoryWrapper : NSObject
@property (nonatomic, readonly) enum DotFaceModuleCategory moduleCategory;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithModuleCategory:(enum DotFaceModuleCategory)moduleCategory OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end

typedef SWIFT_ENUM(NSInteger, DotFaceModuleId, open) {
  DotFaceModuleIdDetectionFast = 0,
  DotFaceModuleIdDetectionBalanced = 1,
  DotFaceModuleIdVerification = 2,
  DotFaceModuleIdEyeGazeLiveness = 3,
  DotFaceModuleIdPassiveLiveness = 4,
  DotFaceModuleIdBackgroundUniformity = 5,
};

@class DOTEyesExpression;

SWIFT_CLASS_NAMED("Expression")
@interface DOTExpression : NSObject
@property (nonatomic, readonly, strong) DOTEyesExpression * _Nullable eyes;
@property (nonatomic, readonly, strong) DOTFaceAttribute * _Nullable mouth;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithEyes:(DOTEyesExpression * _Nullable)eyes mouth:(DOTFaceAttribute * _Nullable)mouth OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end

@class DOTEyesExpressionQuery;

SWIFT_CLASS_NAMED("ExpressionQuery")
@interface DOTExpressionQuery : NSObject
@property (nonatomic, readonly, strong) DOTEyesExpressionQuery * _Nonnull eyes;
@property (nonatomic, readonly) BOOL mouth;
- (nonnull instancetype)init;
- (nonnull instancetype)initWithEyes:(DOTEyesExpressionQuery * _Nonnull)eyes mouth:(BOOL)mouth OBJC_DESIGNATED_INITIALIZER;
@end

@class DOTSegment;
enum DOTEyeGazeLivenessTransitionType : NSInteger;
@class UIImage;

/// Eye gaze liveness configuration options.
SWIFT_CLASS_NAMED("EyeGazeLivenessConfiguration")
@interface DOTEyeGazeLivenessConfiguration : NSObject
/// Ratio used for calculating minimal face size in image in range [0.0, 1.0]. Default is <code>0.1</code>.
@property (nonatomic, readonly) double minFaceSizeRatio;
/// Ratio used for calculating maximal face size in image in range [0.0, 1.0]. Default is <code>0.3</code>.
@property (nonatomic, readonly) double maxFaceSizeRatio;
/// Proximity tolerance defines valid distance from device in range [0.0, 1.0]. Default is <code>0.5</code>.
@property (nonatomic, readonly) double proximityTolerance;
/// Array of segments which will be used for eye gaze liveness.
@property (nonatomic, readonly, copy) NSArray<DOTSegment *> * _Nonnull segments;
/// Minimal required number of valid segments. Must be in range [4, 7]. Default is <code>4</code>.
@property (nonatomic, readonly) NSInteger minValidSegmentCount;
/// Transition type. Default is <code>.move</code>.
@property (nonatomic, readonly) enum DOTEyeGazeLivenessTransitionType transitionType;
/// The moving object image.
@property (nonatomic, readonly, strong) UIImage * _Nonnull objectImage;
/// Size of the moving object. Default is <code>CGSize(width: 50, height: 50)</code>.
@property (nonatomic, readonly) CGSize objectImageSize;
- (nonnull instancetype)init;
- (nullable instancetype)initWithTransitionType:(enum DOTEyeGazeLivenessTransitionType)transitionType segments:(NSArray<DOTSegment *> * _Nonnull)segments minValidSegmentCount:(NSInteger)minValidSegmentCount minFaceSizeRatio:(double)minFaceSizeRatio maxFaceSizeRatio:(double)maxFaceSizeRatio objectImage:(UIImage * _Nullable)objectImage objectImageSize:(CGSize)objectImageSize proximityTolerance:(double)proximityTolerance error:(NSError * _Nullable * _Nullable)error;
@end

/// Eye gaze liveness available transition types.
typedef SWIFT_ENUM_NAMED(NSInteger, DOTEyeGazeLivenessTransitionType, "TransitionType", open) {
/// Object is moving.
  DOTEyeGazeLivenessTransitionTypeMove = 0,
/// Object is fading.
  DOTEyeGazeLivenessTransitionTypeFade = 1,
};

typedef SWIFT_ENUM_NAMED(NSInteger, DOTEyeGazeLivenessState, "EyeGazeLivenessState", open) {
  DOTEyeGazeLivenessStateOk = 0,
  DOTEyeGazeLivenessStateNoFace = 1,
  DOTEyeGazeLivenessStateLostFace = 2,
  DOTEyeGazeLivenessStateLowQualityFace = 3,
  DOTEyeGazeLivenessStateFaceTooClose = 4,
  DOTEyeGazeLivenessStateFaceTooFar = 5,
};

@class UIColor;
@class UIFont;

/// Eye gaze liveness user interface customization options.
SWIFT_CLASS_NAMED("EyeGazeLivenessStyle")
@interface DOTEyeGazeLivenessStyle : NSObject
/// Background color of top level view.
@property (nonatomic, readonly, strong) UIColor * _Nonnull backgroundColor;
/// Moving object color.
@property (nonatomic, readonly, strong) UIColor * _Nonnull objectColor;
/// Hint label font.
@property (nonatomic, readonly, strong) UIFont * _Nonnull hintFont;
/// Hint label text color.
@property (nonatomic, readonly, strong) UIColor * _Nonnull hintTextColor;
/// Hint view background color.
@property (nonatomic, readonly, strong) UIColor * _Nonnull hintBackgroundColor;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithBackgroundColor:(UIColor * _Nonnull)backgroundColor objectColor:(UIColor * _Nonnull)objectColor hintFont:(UIFont * _Nonnull)hintFont hintTextColor:(UIColor * _Nonnull)hintTextColor hintBackgroundColor:(UIColor * _Nonnull)hintBackgroundColor OBJC_DESIGNATED_INITIALIZER;
@end

@protocol DOTEyeGazeLivenessViewControllerDelegate;
@class NSBundle;
@class NSCoder;

/// UI component for evaluating liveness by tracking eye gaze.
/// This component requires <code>DotFaceEyeGazeLiveness</code> module to be active.
SWIFT_CLASS_NAMED("EyeGazeLivenessViewController")
@interface DOTEyeGazeLivenessViewController : UIViewController
/// Current configuration.
@property (nonatomic, readonly, strong) DOTEyeGazeLivenessConfiguration * _Nonnull configuration;
/// Current style.
@property (nonatomic, readonly, strong) DOTEyeGazeLivenessStyle * _Nonnull style;
/// Set this delegate to handle eye gaze liveness events.
@property (nonatomic, weak) id <DOTEyeGazeLivenessViewControllerDelegate> _Nullable delegate;
/// Create new instance of <code>EyeGazeLivenessViewController</code>.
/// \param configuration Configure functionality.
///
/// \param style Customize user interface.
///
+ (DOTEyeGazeLivenessViewController * _Nonnull)createWithConfiguration:(DOTEyeGazeLivenessConfiguration * _Nonnull)configuration style:(DOTEyeGazeLivenessStyle * _Nonnull)style SWIFT_WARN_UNUSED_RESULT;
/// Start liveness detection process.
- (void)start;
/// Stop liveness detection process asynchronously. Wait for delegate callback <code>eyeGazeLivenessViewControllerStopped()</code>.
- (void)stopAsync;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end




@protocol UIViewControllerTransitionCoordinator;

@interface DOTEyeGazeLivenessViewController (SWIFT_EXTENSION(DotFaceCore))
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewDidDisappear:(BOOL)animated;
- (void)viewDidLayoutSubviews;
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
@end


@class DOTSegmentImage;

/// Implement this delegate to handle eye gaze liveness events.
SWIFT_PROTOCOL_NAMED("EyeGazeLivenessViewControllerDelegate")
@protocol DOTEyeGazeLivenessViewControllerDelegate
@optional
- (void)eyeGazeLivenessViewControllerViewDidLoad:(DOTEyeGazeLivenessViewController * _Nonnull)viewController;
- (void)eyeGazeLivenessViewControllerViewDidLayoutSubviews:(DOTEyeGazeLivenessViewController * _Nonnull)viewController;
- (void)eyeGazeLivenessViewControllerViewWillAppear:(DOTEyeGazeLivenessViewController * _Nonnull)viewController;
- (void)eyeGazeLivenessViewControllerViewDidAppear:(DOTEyeGazeLivenessViewController * _Nonnull)viewController;
- (void)eyeGazeLivenessViewControllerViewWillDisappear:(DOTEyeGazeLivenessViewController * _Nonnull)viewController;
- (void)eyeGazeLivenessViewControllerViewDidDisappear:(DOTEyeGazeLivenessViewController * _Nonnull)viewController;
- (void)eyeGazeLivenessViewControllerViewWillTransition:(DOTEyeGazeLivenessViewController * _Nonnull)viewController;
/// Tells the delegate that you have no permission for camera usage.
- (void)eyeGazeLivenessViewControllerNoCameraPermission:(DOTEyeGazeLivenessViewController * _Nonnull)viewController;
/// Tells the delegate that the component has stopped.
- (void)eyeGazeLivenessViewControllerStopped:(DOTEyeGazeLivenessViewController * _Nonnull)viewController;
@required
/// Tells the delegate that the eye gaze liveness state has changed.
- (void)eyeGazeLivenessViewController:(DOTEyeGazeLivenessViewController * _Nonnull)viewController stateChanged:(enum DOTEyeGazeLivenessState)state;
/// Tells the delegate that eye gaze liveness has finished with score and captured segments. This callback is called after the component has stopped.
- (void)eyeGazeLivenessViewController:(DOTEyeGazeLivenessViewController * _Nonnull)viewController finished:(float)score with:(NSArray<DOTSegmentImage *> * _Nonnull)segmentImages;
/// Tells the delegate that eye gaze liveness cannot continue because there are no segments left. This callback is called after the component has stopped.
- (void)eyeGazeLivenessViewControllerNoMoreSegments:(DOTEyeGazeLivenessViewController * _Nonnull)viewController;
/// Tells the delegate that eye gaze liveness failed, because no eyes were detected. This callback is called after the component has stopped.
- (void)eyeGazeLivenessViewControllerEyesNotDetected:(DOTEyeGazeLivenessViewController * _Nonnull)viewController;
/// Tells the delegate that face tracking has failed. This callback is called after the component has stopped.
- (void)eyeGazeLivenessViewControllerFaceTrackingFailed:(DOTEyeGazeLivenessViewController * _Nonnull)viewController;
@end


SWIFT_CLASS_NAMED("EyesExpression")
@interface DOTEyesExpression : NSObject
@property (nonatomic, readonly, strong) DOTFaceAttribute * _Nullable rightEye;
@property (nonatomic, readonly, strong) DOTFaceAttribute * _Nullable leftEye;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithRightEye:(DOTFaceAttribute * _Nullable)rightEye leftEye:(DOTFaceAttribute * _Nullable)leftEye OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS_NAMED("EyesExpressionQuery")
@interface DOTEyesExpressionQuery : NSObject
@property (nonatomic, readonly) BOOL rightEye;
@property (nonatomic, readonly) BOOL leftEye;
- (nonnull instancetype)init;
- (nonnull instancetype)initWithRightEye:(BOOL)rightEye leftEye:(BOOL)leftEye OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("FaceAspects")
@interface DOTFaceAspects : NSObject
@property (nonatomic, readonly) NSInteger eyeDistance;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithEyeDistance:(NSInteger)eyeDistance OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS_NAMED("FaceAttribute")
@interface DOTFaceAttribute : NSObject
@property (nonatomic, readonly) double score;
@property (nonatomic, readonly) BOOL preconditionsMet;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithScore:(double)score preconditionsMet:(BOOL)preconditionsMet OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// Face auto capture configuration options.
SWIFT_CLASS_NAMED("FaceAutoCaptureConfiguration")
@interface DOTFaceAutoCaptureConfiguration : NSObject
/// Ratio used for calculating minimal face size in image in range [0.0, 1.0]. Default is <code>0.1</code>.
@property (nonatomic, readonly) double minFaceSizeRatio;
/// Ratio used for calculating maximal face size in image in range [0.0, 1.0]. Default is <code>0.3</code>.
@property (nonatomic, readonly) double maxFaceSizeRatio;
/// Indicates if tick animation should be performed after succesfull capture. Default is <code>false</code>.
@property (nonatomic, readonly) BOOL isCheckAnimationEnabled;
/// Specify camera facing. Default is <code>.front</code>.
@property (nonatomic, readonly) enum DOTCameraFacing cameraFacing;
/// Specify camera preview scale type. Default is <code>.fit</code>.
@property (nonatomic, readonly) enum DOTCameraPreviewScaleType cameraPreviewScaleType;
/// Quality attributes of face capture result.
@property (nonatomic, readonly, copy) NSSet<DOTQualityAttribute *> * _Nonnull qualityAttributes;
/// Configure the face auto capture process.
/// \param minFaceSizeRatio Ratio used for calculating minimal face size in image.
///
/// \param maxFaceSizeRatio Ratio used for calculating maximal face size in image.
///
/// \param isCheckAnimationEnabled Indicates if tick animation should be performed after succesfull capture.
///
/// \param cameraFacing Specify camera facing.
///
/// \param cameraPreviewScaleType Specify camera preview scale type.
///
/// \param qualityAttributes Configure desired quality attributes of the face capture result.
///
- (nonnull instancetype)initWithMinFaceSizeRatio:(double)minFaceSizeRatio maxFaceSizeRatio:(double)maxFaceSizeRatio isCheckAnimationEnabled:(BOOL)isCheckAnimationEnabled cameraFacing:(enum DOTCameraFacing)cameraFacing cameraPreviewScaleType:(enum DOTCameraPreviewScaleType)cameraPreviewScaleType qualityAttributes:(NSSet<DOTQualityAttribute *> * _Nonnull)qualityAttributes;
/// Configure the face auto capture process with default values.
- (nonnull instancetype)init;
@end


/// Face auto capture user interface customization options.
SWIFT_CLASS_NAMED("FaceAutoCaptureStyle")
@interface DOTFaceAutoCaptureStyle : NSObject
/// Background color of top level view.
@property (nonatomic, readonly, strong) UIColor * _Nonnull backgroundColor;
/// Background color of overlay view.
@property (nonatomic, readonly, strong) UIColor * _Nonnull backgroundOverlayColor;
/// Color of circle in overlay view.
@property (nonatomic, readonly, strong) UIColor * _Nonnull circleOutlineColor;
/// Tracking circle color.
@property (nonatomic, readonly, strong) UIColor * _Nonnull trackingCircleColor;
/// Overlay circle color for finished state.
@property (nonatomic, readonly, strong) UIColor * _Nonnull progressValidColor;
/// Overlay circle color for almost fulfilled state.
@property (nonatomic, readonly, strong) UIColor * _Nonnull progressIntermediateColor;
/// Overlay circle color for not fulfilled state.
@property (nonatomic, readonly, strong) UIColor * _Nonnull progressInvalidColor;
/// Animated tick color.
@property (nonatomic, readonly, strong) UIColor * _Nonnull tickColor;
/// Hint label font.
@property (nonatomic, readonly, strong) UIFont * _Nonnull hintFont;
/// Hint label text color.
@property (nonatomic, readonly, strong) UIColor * _Nonnull hintTextColor;
/// Hint view background color.
@property (nonatomic, readonly, strong) UIColor * _Nonnull hintBackgroundColor;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithBackgroundColor:(UIColor * _Nonnull)backgroundColor backgroundOverlayColor:(UIColor * _Nonnull)backgroundOverlayColor circleOutlineColor:(UIColor * _Nonnull)circleOutlineColor trackingCircleColor:(UIColor * _Nonnull)trackingCircleColor progressValidColor:(UIColor * _Nonnull)progressValidColor progressIntermediateColor:(UIColor * _Nonnull)progressIntermediateColor progressInvalidColor:(UIColor * _Nonnull)progressInvalidColor tickColor:(UIColor * _Nonnull)tickColor hintFont:(UIFont * _Nonnull)hintFont hintTextColor:(UIColor * _Nonnull)hintTextColor hintBackgroundColor:(UIColor * _Nonnull)hintBackgroundColor OBJC_DESIGNATED_INITIALIZER;
@end

@protocol DOTFaceAutoCaptureViewControllerDelegate;

/// UI component for capturing high quality face images.
/// This component requires <code>DotFaceDetection*</code> module to be active.
/// If you want to evaluate background uniformity during the face auto capture process, you will need <code>DotFaceBackgroundUniformity</code> module to be active.
/// If you want to evaluate face mask during the face auto capture process, you will need <code>DotFaceDetectionBalanced</code> module to be active.
SWIFT_CLASS_NAMED("FaceAutoCaptureViewController")
@interface DOTFaceAutoCaptureViewController : UIViewController
/// Current configuration.
@property (nonatomic, readonly, strong) DOTFaceAutoCaptureConfiguration * _Nonnull configuration;
/// Current style.
@property (nonatomic, readonly, strong) DOTFaceAutoCaptureStyle * _Nonnull style;
/// Set this delegate to handle face auto capture events.
@property (nonatomic, weak) id <DOTFaceAutoCaptureViewControllerDelegate> _Nullable delegate;
/// Create new instance of <code>FaceAutoCaptureViewController</code>.
/// \param configuration Configure functionality.
///
/// \param style Customize user interface.
///
+ (DOTFaceAutoCaptureViewController * _Nonnull)createWithConfiguration:(DOTFaceAutoCaptureConfiguration * _Nonnull)configuration style:(DOTFaceAutoCaptureStyle * _Nonnull)style SWIFT_WARN_UNUSED_RESULT;
/// Start face auto capture process.
- (void)start;
/// Stop face auto capture process asynchronously. Wait for delegate callback <code>faceAutoCaptureViewControllerStopped()</code>.
- (void)stopAsync;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end




@interface DOTFaceAutoCaptureViewController (SWIFT_EXTENSION(DotFaceCore))
- (void)viewDidLoad;
- (void)viewDidLayoutSubviews;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
- (void)viewDidDisappear:(BOOL)animated;
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
@end




/// Implement this delegate to handle face auto capture events.
SWIFT_PROTOCOL_NAMED("FaceAutoCaptureViewControllerDelegate")
@protocol DOTFaceAutoCaptureViewControllerDelegate
@optional
- (void)faceAutoCaptureViewControllerViewDidLoad:(DOTFaceAutoCaptureViewController * _Nonnull)viewController;
- (void)faceAutoCaptureViewControllerViewDidLayoutSubviews:(DOTFaceAutoCaptureViewController * _Nonnull)viewController;
- (void)faceAutoCaptureViewControllerViewWillAppear:(DOTFaceAutoCaptureViewController * _Nonnull)viewController;
- (void)faceAutoCaptureViewControllerViewDidAppear:(DOTFaceAutoCaptureViewController * _Nonnull)viewController;
- (void)faceAutoCaptureViewControllerViewWillDisappear:(DOTFaceAutoCaptureViewController * _Nonnull)viewController;
- (void)faceAutoCaptureViewControllerViewDidDisappear:(DOTFaceAutoCaptureViewController * _Nonnull)viewController;
- (void)faceAutoCaptureViewControllerViewWillTransition:(DOTFaceAutoCaptureViewController * _Nonnull)viewController;
/// Tells the delegate that you have no permission for camera usage.
- (void)faceAutoCaptureViewControllerNoCameraPermission:(DOTFaceAutoCaptureViewController * _Nonnull)viewController;
/// Tells the delegate that the component has stopped.
- (void)faceAutoCaptureViewControllerStopped:(DOTFaceAutoCaptureViewController * _Nonnull)viewController;
@required
/// Tells the delegate that the capture step has changed.
- (void)faceAutoCaptureViewController:(DOTFaceAutoCaptureViewController * _Nonnull)viewController stepChanged:(enum DOTCaptureStepId)captureStepId with:(DOTDetectedFace * _Nullable)detectedFace;
/// Tells the delegate that the face was captured. This callback is called after the component has stopped.
- (void)faceAutoCaptureViewController:(DOTFaceAutoCaptureViewController * _Nonnull)viewController captured:(DOTDetectedFace * _Nonnull)detectedFace;
@end

@class DOTFaceImage;

/// Non-UI component for detecting faces in an image.
/// This component requires <code>DotFaceDetection*</code> module to be active.
SWIFT_CLASS_NAMED("FaceDetector")
@interface DOTFaceDetector : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Detect faces in an image.
/// \param faceImage Face image
///
/// \param maximumFaces Maximum number of faces to detect.
///
///
/// returns:
/// Array of detected faces.
- (NSArray<DOTDetectedFace *> * _Nonnull)detectWithFaceImage:(DOTFaceImage * _Nonnull)faceImage maximumFaces:(NSInteger)maximumFaces SWIFT_WARN_UNUSED_RESULT;
@end

/// Available face features.
typedef SWIFT_ENUM_NAMED(NSInteger, DOTFaceFeature, "FaceFeature", open) {
  DOTFaceFeatureRightEyeOuterCorner = 0,
  DOTFaceFeatureRightEyeCenter = 1,
  DOTFaceFeatureRightEyeInnerCorner = 2,
  DOTFaceFeatureLeftEyeOuterCorner = 3,
  DOTFaceFeatureLeftEyeCenter = 4,
  DOTFaceFeatureLeftEyeInnerCorner = 5,
  DOTFaceFeatureNoseRoot = 6,
  DOTFaceFeatureNoseRightBottom = 7,
  DOTFaceFeatureNoseTip = 8,
  DOTFaceFeatureNoseLeftBottom = 9,
  DOTFaceFeatureNoseBottom = 10,
  DOTFaceFeatureMouthRightCorner = 11,
  DOTFaceFeatureMouthCenter = 12,
  DOTFaceFeatureMouthLeftCorner = 13,
  DOTFaceFeatureMouthUpperEdge = 14,
  DOTFaceFeatureMouthLowerEdge = 15,
  DOTFaceFeatureRightEyebrowOuterEdge = 16,
  DOTFaceFeatureRightEyebrowInnerEdge = 17,
  DOTFaceFeatureLeftEyebrowOuterEdge = 18,
  DOTFaceFeatureLeftEyebrowInnerEdge = 19,
  DOTFaceFeatureFaceRightEdge = 20,
  DOTFaceFeatureFaceChinTip = 21,
  DOTFaceFeatureFaceLeftEdge = 22,
};


/// Face feature point contains face feature, point and score.
SWIFT_CLASS_NAMED("FaceFeaturePoint")
@interface DOTFaceFeaturePoint : NSObject
/// Face feature.
@property (nonatomic, readonly) enum DOTFaceFeature feature;
/// Position point of the face feature.
@property (nonatomic, readonly) CGPoint point;
/// Score of the face feature.
@property (nonatomic, readonly) float score;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithFeature:(enum DOTFaceFeature)feature point:(CGPoint)point score:(float)score OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// Face feature wrapper.
SWIFT_CLASS_NAMED("FaceFeatureWrapper")
@interface DOTFaceFeatureWrapper : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithFeature:(enum DOTFaceFeature)feature OBJC_DESIGNATED_INITIALIZER;
/// Get face feature description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// Face image is used for detection and verification.
SWIFT_CLASS_NAMED("FaceImage")
@interface DOTFaceImage : NSObject
/// Raw image.
@property (nonatomic, readonly, strong) DOTBgrRawImage * _Nonnull image;
/// Minimal face size used for detection in pixels.
@property (nonatomic, readonly) NSInteger minFaceSizePixels;
/// Maximal face size used for detection in pixels.
@property (nonatomic, readonly) NSInteger maxFaceSizePixels;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS("_TtC11DotFaceCore16FaceImageFactory")
@interface FaceImageFactory : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Create face image from raw image and face size ranges.
/// \param image Raw image.
///
/// \param minFaceSizeRatio Minimum face size to shorter image side ratio. This defines size of searched face in the image.
/// Valid values are in interval [0.0, 1.0]. Must be lesser than <code>maxFaceSizeRatio</code>.
/// Must be greater than or equal to minimal valid face size, which depends on the active detection module.
///
/// \param maxFaceSizeRatio Maximum face size to shorter image side ratio. This defines size of searched face in the image. Valid values are in interval [0.0, 1.0].
///
///
/// returns:
/// New face image object.
+ (DOTFaceImage * _Nullable)createWithImage:(DOTBgrRawImage * _Nonnull)image minFaceSizeRatio:(double)minFaceSizeRatio maxFaceSizeRatio:(double)maxFaceSizeRatio error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("FaceImageQuality")
@interface DOTFaceImageQuality : NSObject
@property (nonatomic, readonly, strong) DOTFaceAttribute * _Nullable sharpness;
@property (nonatomic, readonly, strong) DOTFaceAttribute * _Nullable brightness;
@property (nonatomic, readonly, strong) DOTFaceAttribute * _Nullable contrast;
@property (nonatomic, readonly, strong) DOTFaceAttribute * _Nullable uniqueIntensityLevels;
@property (nonatomic, readonly, strong) DOTFaceAttribute * _Nullable shadow;
@property (nonatomic, readonly, strong) DOTFaceAttribute * _Nullable specularity;
@property (nonatomic, readonly, strong) DOTFaceAttribute * _Nullable backgroundUniformity;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithSharpness:(DOTFaceAttribute * _Nullable)sharpness brightness:(DOTFaceAttribute * _Nullable)brightness contrast:(DOTFaceAttribute * _Nullable)contrast uniqueIntensityLevels:(DOTFaceAttribute * _Nullable)uniqueIntensityLevels shadow:(DOTFaceAttribute * _Nullable)shadow specularity:(DOTFaceAttribute * _Nullable)specularity backgroundUniformity:(DOTFaceAttribute * _Nullable)backgroundUniformity OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS_NAMED("FaceImageQualityQuery")
@interface DOTFaceImageQualityQuery : NSObject
@property (nonatomic, readonly) BOOL sharpness;
@property (nonatomic, readonly) BOOL brightness;
@property (nonatomic, readonly) BOOL contrast;
@property (nonatomic, readonly) BOOL uniqueIntensityLevels;
@property (nonatomic, readonly) BOOL shadow;
@property (nonatomic, readonly) BOOL specularity;
@property (nonatomic, readonly) BOOL backgroundUniformity;
- (nonnull instancetype)init;
- (nonnull instancetype)initWithSharpness:(BOOL)sharpness brightness:(BOOL)brightness contrast:(BOOL)contrast uniqueIntensityLevels:(BOOL)uniqueIntensityLevels shadow:(BOOL)shadow specularity:(BOOL)specularity backgroundUniformity:(BOOL)backgroundUniformity OBJC_DESIGNATED_INITIALIZER;
@end

@class DOTFaceMatcherResult;

/// Non-UI component for matching face images and templates.
/// This component requires <code>DotFaceVerification</code> module to be active.
SWIFT_CLASS_NAMED("FaceMatcher")
@interface DOTFaceMatcher : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Match face image against reference face image.
/// \param referenceFaceImage Face image
///
/// \param probeFaceImage Face image
///
///
/// returns:
/// Result with matching score.
- (DOTFaceMatcherResult * _Nullable)matchWithReferenceFaceImage:(DOTFaceImage * _Nonnull)referenceFaceImage probeFaceImage:(DOTFaceImage * _Nonnull)probeFaceImage error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Match face image against reference template.
/// \param referenceTemplate Reference template.
///
/// \param probeFaceImage Face image.
///
///
/// returns:
/// Result with matching score.
- (DOTFaceMatcherResult * _Nullable)matchWithReferenceTemplate:(DOTTemplate * _Nonnull)referenceTemplate probeFaceImage:(DOTFaceImage * _Nonnull)probeFaceImage error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Match face image against reference template.
/// \param referenceTemplateBytes Reference template as <code>Data</code>.
///
/// \param probeFaceImage Face image.
///
///
/// returns:
/// Result with matching score.
- (DOTFaceMatcherResult * _Nullable)matchWithReferenceTemplateBytes:(NSData * _Nonnull)referenceTemplateBytes probeFaceImage:(DOTFaceImage * _Nonnull)probeFaceImage error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("Result")
@interface DOTFaceMatcherResult : NSObject
@property (nonatomic, readonly) double score;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithScore:(double)score OBJC_DESIGNATED_INITIALIZER;
@end

@class DOTHeadPose;
@class DOTWearables;

SWIFT_CLASS_NAMED("FaceQuality")
@interface DOTFaceQuality : NSObject
@property (nonatomic, readonly, strong) DOTFaceImageQuality * _Nullable imageQuality;
@property (nonatomic, readonly, strong) DOTHeadPose * _Nullable headPose;
@property (nonatomic, readonly, strong) DOTWearables * _Nullable wearables;
@property (nonatomic, readonly, strong) DOTExpression * _Nullable expression;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithImageQuality:(DOTFaceImageQuality * _Nullable)imageQuality headPose:(DOTHeadPose * _Nullable)headPose wearables:(DOTWearables * _Nullable)wearables expression:(DOTExpression * _Nullable)expression OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end

@class DOTHeadPoseQuery;
@class DOTWearablesQuery;

SWIFT_CLASS_NAMED("FaceQualityQuery")
@interface DOTFaceQualityQuery : NSObject
@property (nonatomic, readonly, strong) DOTFaceImageQualityQuery * _Nonnull imageQuality;
@property (nonatomic, readonly, strong) DOTHeadPoseQuery * _Nonnull headPose;
@property (nonatomic, readonly, strong) DOTWearablesQuery * _Nonnull wearables;
@property (nonatomic, readonly, strong) DOTExpressionQuery * _Nonnull expression;
- (nonnull instancetype)init;
- (nonnull instancetype)initWithImageQuality:(DOTFaceImageQualityQuery * _Nonnull)imageQuality headPose:(DOTHeadPoseQuery * _Nonnull)headPose wearables:(DOTWearablesQuery * _Nonnull)wearables expression:(DOTExpressionQuery * _Nonnull)expression OBJC_DESIGNATED_INITIALIZER;
@end


/// Face simple capture configuration options.
SWIFT_CLASS_NAMED("FaceSimpleCaptureConfiguration")
@interface DOTFaceSimpleCaptureConfiguration : NSObject
/// Ratio used for calculating minimal face size in image in range [0.0, 1.0]. Default is <code>0.1</code>.
@property (nonatomic, readonly) double minFaceSizeRatio;
/// Ratio used for calculating maximal face size in image in range [0.0, 1.0]. Default is <code>0.3</code>.
@property (nonatomic, readonly) double maxFaceSizeRatio;
/// Specify camera facing. Default is <code>.front</code>.
@property (nonatomic, readonly) enum DOTCameraFacing cameraFacing;
/// Specify camera preview scale type. Default is <code>.fit</code>.
@property (nonatomic, readonly) enum DOTCameraPreviewScaleType cameraPreviewScaleType;
/// Configure the face simple capture process.
/// \param minFaceSizeRatio Ratio used for calculating minimal face size in image.
///
/// \param maxFaceSizeRatio Ratio used for calculating maximal face size in image.
///
/// \param cameraFacing Specify camera facing.
///
/// \param cameraPreviewScaleType Specify camera preview scale type.
///
- (nonnull instancetype)initWithMinFaceSizeRatio:(double)minFaceSizeRatio maxFaceSizeRatio:(double)maxFaceSizeRatio cameraFacing:(enum DOTCameraFacing)cameraFacing cameraPreviewScaleType:(enum DOTCameraPreviewScaleType)cameraPreviewScaleType;
/// Configure the face simple capture process with default values.
- (nonnull instancetype)init;
@end


/// Face simple capture user interface customization options.
SWIFT_CLASS_NAMED("FaceSimpleCaptureStyle")
@interface DOTFaceSimpleCaptureStyle : NSObject
/// Background color of top level view.
@property (nonatomic, readonly, strong) UIColor * _Nonnull backgroundColor;
/// Tracking circle color.
@property (nonatomic, readonly, strong) UIColor * _Nonnull trackingCircleColor;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithBackgroundColor:(UIColor * _Nonnull)backgroundColor trackingCircleColor:(UIColor * _Nonnull)trackingCircleColor OBJC_DESIGNATED_INITIALIZER;
@end

@protocol DOTFaceSimpleCaptureViewControllerDelegate;

/// UI component for capturing face images.
/// This component requires <code>DotFaceDetection*</code> module to be active.
SWIFT_CLASS_NAMED("FaceSimpleCaptureViewController")
@interface DOTFaceSimpleCaptureViewController : UIViewController
/// Current configuration.
@property (nonatomic, readonly, strong) DOTFaceSimpleCaptureConfiguration * _Nonnull configuration;
/// Current style.
@property (nonatomic, readonly, strong) DOTFaceSimpleCaptureStyle * _Nonnull style;
/// Set this delegate to handle face simple capture events.
@property (nonatomic, weak) id <DOTFaceSimpleCaptureViewControllerDelegate> _Nullable delegate;
/// Create new instance of <code>FaceSimpleCaptureViewController</code>.
/// \param configuration Configure functionality.
///
/// \param style Customize user interface.
///
+ (DOTFaceSimpleCaptureViewController * _Nonnull)createWithConfiguration:(DOTFaceSimpleCaptureConfiguration * _Nonnull)configuration style:(DOTFaceSimpleCaptureStyle * _Nonnull)style SWIFT_WARN_UNUSED_RESULT;
/// Start face simple capture process.
- (void)start;
/// Stop face simple capture process asynchronously. Wait for delegate callback <code>faceSimpleCaptureViewControllerStopped()</code>.
- (void)stopAsync;
/// Request face capture.
- (void)requestCapture;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end






@interface DOTFaceSimpleCaptureViewController (SWIFT_EXTENSION(DotFaceCore))
- (void)viewDidLoad;
- (void)viewDidLayoutSubviews;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
- (void)viewDidDisappear:(BOOL)animated;
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
@end


/// Implement this delegate to handle face simple capture events.
SWIFT_PROTOCOL_NAMED("FaceSimpleCaptureViewControllerDelegate")
@protocol DOTFaceSimpleCaptureViewControllerDelegate
@optional
- (void)faceSimpleCaptureViewControllerViewDidLoad:(DOTFaceSimpleCaptureViewController * _Nonnull)viewController;
- (void)faceSimpleCaptureViewControllerViewDidLayoutSubviews:(DOTFaceSimpleCaptureViewController * _Nonnull)viewController;
- (void)faceSimpleCaptureViewControllerViewWillAppear:(DOTFaceSimpleCaptureViewController * _Nonnull)viewController;
- (void)faceSimpleCaptureViewControllerViewDidAppear:(DOTFaceSimpleCaptureViewController * _Nonnull)viewController;
- (void)faceSimpleCaptureViewControllerViewWillDisappear:(DOTFaceSimpleCaptureViewController * _Nonnull)viewController;
- (void)faceSimpleCaptureViewControllerViewDidDisappear:(DOTFaceSimpleCaptureViewController * _Nonnull)viewController;
- (void)faceSimpleCaptureViewControllerViewWillTransition:(DOTFaceSimpleCaptureViewController * _Nonnull)viewController;
/// Tells the delegate that you have no permission for camera usage.
- (void)faceSimpleCaptureViewControllerNoCameraPermission:(DOTFaceSimpleCaptureViewController * _Nonnull)viewController;
/// Tells the delegate that the component has stopped.
- (void)faceSimpleCaptureViewControllerStopped:(DOTFaceSimpleCaptureViewController * _Nonnull)viewController;
@required
/// Tells the delegate that the face was captured.
- (void)faceSimpleCaptureViewController:(DOTFaceSimpleCaptureViewController * _Nonnull)viewController captured:(DOTDetectedFace * _Nonnull)detectedFace;
@end


SWIFT_CLASS_NAMED("Glasses")
@interface DOTGlasses : NSObject
@property (nonatomic, readonly) double score;
@property (nonatomic, readonly) BOOL preconditionsMet;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithScore:(double)score preconditionsMet:(BOOL)preconditionsMet OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end

@class DOTHeadPoseAttribute;

SWIFT_CLASS_NAMED("HeadPose")
@interface DOTHeadPose : NSObject
@property (nonatomic, readonly, strong) DOTHeadPoseAttribute * _Nullable roll;
@property (nonatomic, readonly, strong) DOTHeadPoseAttribute * _Nullable yaw;
@property (nonatomic, readonly, strong) DOTHeadPoseAttribute * _Nullable pitch;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithRoll:(DOTHeadPoseAttribute * _Nullable)roll yaw:(DOTHeadPoseAttribute * _Nullable)yaw pitch:(DOTHeadPoseAttribute * _Nullable)pitch OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS_NAMED("HeadPoseAttribute")
@interface DOTHeadPoseAttribute : NSObject
@property (nonatomic, readonly) float angle;
@property (nonatomic, readonly) BOOL preconditionsMet;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithAngle:(float)angle preconditionsMet:(BOOL)preconditionsMet OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS_NAMED("HeadPoseQuery")
@interface DOTHeadPoseQuery : NSObject
@property (nonatomic, readonly) BOOL roll;
@property (nonatomic, readonly) BOOL yaw;
@property (nonatomic, readonly) BOOL pitch;
- (nonnull instancetype)init;
- (nonnull instancetype)initWithRoll:(BOOL)roll yaw:(BOOL)yaw pitch:(BOOL)pitch OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL_NAMED("QualityProvider")
@protocol DOTQualityProvider
- (NSSet<DOTQualityAttribute *> * _Nonnull)getQualityAttributes SWIFT_WARN_UNUSED_RESULT;
- (DOTQualityAttribute * _Nullable)findQualityAttributeById:(enum DOTQualityAttributeId)qualityAttributeId SWIFT_WARN_UNUSED_RESULT;
@end


/// This class provides set of <code>QualityAttribute</code> objects recommended for ICAO evaluation.
SWIFT_CLASS_NAMED("IcaoQualityProvider")
@interface DOTIcaoQualityProvider : NSObject <DOTQualityProvider>
/// Returns set of <code>QualityAttribute</code> objects configured for <code>QualityAttributePreset.verification</code>.
- (NSSet<DOTQualityAttribute *> * _Nonnull)getQualityAttributes SWIFT_WARN_UNUSED_RESULT;
/// Returns <code>QualityAttribute</code> object configured for <code>QualityAttributePreset.verification</code>.
/// \param qualityAttributeId Requested <code>QualityAttributeId</code>.
///
///
/// returns:
/// If this provider contains requested <code>QualityAttribute</code> it is returned, <code>nil</code> is returned otherwise.
- (DOTQualityAttribute * _Nullable)findQualityAttributeById:(enum DOTQualityAttributeId)qualityAttributeId SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Image size in pixels.
SWIFT_CLASS_NAMED("ImageSize")
@interface DOTImageSize : NSObject
@property (nonatomic, readonly) NSInteger width;
@property (nonatomic, readonly) NSInteger height;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithWidth:(NSInteger)width height:(NSInteger)height OBJC_DESIGNATED_INITIALIZER;
- (NSInteger)calculatePixelCount SWIFT_WARN_UNUSED_RESULT;
- (double)calculateWidthToHeightRatio SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
@end


/// Class responsible for the localization of user interface strings.
SWIFT_CLASS_NAMED("Localization")
@interface DotFaceLocalization : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// You can override default iOS localization mechanism by providing custom translation dictionary.
/// note:
/// You also need to set <code>useLocalizationDictionary</code> flag to <code>true</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSDictionary<NSString *, NSString *> * _Nullable localizationDictionary;)
+ (NSDictionary<NSString *, NSString *> * _Nullable)localizationDictionary SWIFT_WARN_UNUSED_RESULT;
+ (void)setLocalizationDictionary:(NSDictionary<NSString *, NSString *> * _Nullable)value;
/// If you set this to <code>true</code>, <code>localizationDictionary</code> will be used to localize strings. Default value is <code>false</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL useLocalizationDictionary;)
+ (BOOL)useLocalizationDictionary SWIFT_WARN_UNUSED_RESULT;
+ (void)setUseLocalizationDictionary:(BOOL)value;
/// Bundle used to localize strings.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) NSBundle * _Nonnull bundle;)
+ (NSBundle * _Nonnull)bundle SWIFT_WARN_UNUSED_RESULT;
+ (void)setBundle:(NSBundle * _Nonnull)value;
@end

enum DotFaceLoggerLogLevel : NSInteger;

/// Static class responsible for generating logs. You can configure log level.
SWIFT_CLASS_NAMED("Logger")
@interface DotFaceLogger : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Log level currently in use. Default value is <code>.none</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) enum DotFaceLoggerLogLevel logLevel;)
+ (enum DotFaceLoggerLogLevel)logLevel SWIFT_WARN_UNUSED_RESULT;
+ (void)setLogLevel:(enum DotFaceLoggerLogLevel)value;
+ (void)info:(NSString * _Nullable)message file:(NSString * _Nonnull)file function:(NSString * _Nonnull)function;
+ (void)debug:(NSString * _Nullable)message file:(NSString * _Nonnull)file function:(NSString * _Nonnull)function;
+ (void)warning:(NSString * _Nullable)message file:(NSString * _Nonnull)file function:(NSString * _Nonnull)function;
+ (void)error:(NSString * _Nullable)message file:(NSString * _Nonnull)file function:(NSString * _Nonnull)function;
@end

/// Available log levels.
typedef SWIFT_ENUM_NAMED(NSInteger, DotFaceLoggerLogLevel, "LogLevel", open) {
/// Logs informative events.
  DotFaceLoggerLogLevelInfo = 0,
/// Logs events suitable for debugging purposes.
  DotFaceLoggerLogLevelDebug = 1,
/// Logs unexpected events which indicate malfunction.
  DotFaceLoggerLogLevelWarning = 2,
/// Logs failed operations and other errors.
  DotFaceLoggerLogLevelError = 3,
/// Disables logging.
  DotFaceLoggerLogLevelNone = 4,
};


/// This class provides set of <code>QualityAttribute</code> objects recommended for matching.
SWIFT_CLASS_NAMED("MatchingQualityProvider")
@interface DOTMatchingQualityProvider : NSObject <DOTQualityProvider>
/// Returns set of <code>QualityAttribute</code> objects configured for <code>QualityAttributePreset.verification</code>.
- (NSSet<DOTQualityAttribute *> * _Nonnull)getQualityAttributes SWIFT_WARN_UNUSED_RESULT;
/// Returns <code>QualityAttribute</code> object configured for <code>QualityAttributePreset.verification</code>.
/// \param qualityAttributeId Requested <code>QualityAttributeId</code>.
///
///
/// returns:
/// If this provider contains requested <code>QualityAttribute</code> it is returned, <code>nil</code> is returned otherwise.
- (DOTQualityAttribute * _Nullable)findQualityAttributeById:(enum DOTQualityAttributeId)qualityAttributeId SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// This class provides set of <code>QualityAttribute</code> objects recommended for Passive Liveness evaluation.
SWIFT_CLASS_NAMED("PassiveLivenessQualityProvider")
@interface DOTPassiveLivenessQualityProvider : NSObject <DOTQualityProvider>
/// Returns set of <code>QualityAttribute</code> objects configured for <code>QualityAttributePreset.passiveLiveness</code>.
- (NSSet<DOTQualityAttribute *> * _Nonnull)getQualityAttributes SWIFT_WARN_UNUSED_RESULT;
/// Returns <code>QualityAttribute</code> object configured for <code>QualityAttributePreset.passiveLiveness</code>.
/// \param qualityAttributeId Requested <code>QualityAttributeId</code>.
///
///
/// returns:
/// If this provider contains requested <code>QualityAttribute</code> it is returned, <code>nil</code> is returned otherwise.
- (DOTQualityAttribute * _Nullable)findQualityAttributeById:(enum DOTQualityAttributeId)qualityAttributeId SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class DOTValueRange;

/// Quality attribute of the face capture result.
/// You can use this class to customize the ranges of quality attributes which are checked during the face capture process.
/// The result of the face capture process is guaranteed to satisfy <code>targetRange</code>.
/// The <code>strictRange</code> will be satisfied at least once (by at least one video frame) during the face capture process, but the result may not satisfy <code>strictRange</code>.
/// The <code>strictRange</code> must be entirely contained in <code>targetRange</code>.
SWIFT_CLASS_NAMED("QualityAttribute")
@interface DOTQualityAttribute : NSObject
@property (nonatomic, readonly) enum DOTQualityAttributeId qualityAttributeId;
@property (nonatomic, readonly, strong) DOTValueRange * _Nonnull targetRange;
@property (nonatomic, readonly, strong) DOTValueRange * _Nonnull strictRange;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nullable instancetype)initWithId:(enum DOTQualityAttributeId)id targetRange:(DOTValueRange * _Nonnull)targetRange strictRange:(DOTValueRange * _Nonnull)strictRange error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
@end

/// A value identifying the quality attribute of the face capture result.
typedef SWIFT_ENUM_NAMED(NSInteger, DOTQualityAttributeId, "QualityAttributeId", open) {
/// Valid values are in range [0.0, 1.0].
  DOTQualityAttributeIdPosition = 0,
/// Valid values are in [0.0, 1.0].
  DOTQualityAttributeIdProximity = 1,
/// Valid values are in range [0.0, 1.0].
  DOTQualityAttributeIdGlassStatus = 2,
/// Valid values are in range [0.0, 1.0].
  DOTQualityAttributeIdBackgroundUniformity = 3,
/// Valid values are in range [-180.0, 180.0].
  DOTQualityAttributeIdPitchAngle = 4,
/// Valid values are in range [-180.0, 180.0].
  DOTQualityAttributeIdYawAngle = 5,
/// Valid values are in range [0.0, 1.0].
  DOTQualityAttributeIdEyeStatus = 6,
/// Valid values are in range [0.0, 1.0].
  DOTQualityAttributeIdMouthStatus = 7,
/// Valid values are in range [0.0, 1.0].
  DOTQualityAttributeIdLight = 8,
/// Valid values are in range [0.0, 1.0].
  DOTQualityAttributeIdBrightness = 9,
/// Valid values are in range [0.0, 1.0].
  DOTQualityAttributeIdContrast = 10,
/// Valid values are in range [0.0, 1.0].
  DOTQualityAttributeIdShadow = 11,
/// Valid values are in range [0.0, 1.0].
  DOTQualityAttributeIdSharpness = 12,
/// Valid values are in range [0.0, 1.0].
  DOTQualityAttributeIdUniqueIntensityLevels = 13,
/// Valid values are in range [0.0, 1.0].
  DOTQualityAttributeIdFaceConfidence = 14,
/// Valid values are in range [0.0, 1.0].
  DOTQualityAttributeIdMask = 15,
};



SWIFT_PROTOCOL_NAMED("SegmentsGenerator")
@protocol DOTSegmentsGenerator
- (NSArray<DOTSegment *> * _Nonnull)generateWithSegmentCount:(NSInteger)segmentCount segmentDurationMillis:(NSInteger)segmentDurationMillis SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("RandomSegmentsGenerator")
@interface DOTRandomSegmentsGenerator : NSObject <DOTSegmentsGenerator>
- (NSArray<DOTSegment *> * _Nonnull)generateWithSegmentCount:(NSInteger)segmentCount segmentDurationMillis:(NSInteger)segmentDurationMillis SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum DOTSegmentCorner : NSInteger;

SWIFT_CLASS_NAMED("Segment")
@interface DOTSegment : NSObject
@property (nonatomic, readonly) enum DOTSegmentCorner targetCorner;
@property (nonatomic, readonly) NSInteger durationMillis;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithTargetCorner:(enum DOTSegmentCorner)targetCorner durationMillis:(NSInteger)durationMillis OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, DOTSegmentCorner, "Corner", open) {
  DOTSegmentCornerTopLeft = 0,
  DOTSegmentCornerTopRight = 1,
  DOTSegmentCornerBottomLeft = 2,
  DOTSegmentCornerBottomRight = 3,
};


SWIFT_CLASS_NAMED("SegmentImage")
@interface DOTSegmentImage : NSObject
@property (nonatomic, readonly, strong) DOTBgrRawImage * _Nonnull image;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithImage:(DOTBgrRawImage * _Nonnull)image;
@end


@class DOTTemplateVersion;

SWIFT_CLASS_NAMED("Template")
@interface DOTTemplate : NSObject
@property (nonatomic, readonly, strong) DOTTemplateVersion * _Nonnull version;
@property (nonatomic, copy) NSData * _Nonnull bytes;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithBytes:(NSData * _Nonnull)bytes version:(DOTTemplateVersion * _Nonnull)version;
@end


SWIFT_CLASS_NAMED("Version")
@interface DOTTemplateVersion : NSObject
@property (nonatomic, readonly) NSInteger major;
@property (nonatomic, readonly) NSInteger minor;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithMajor:(NSInteger)major minor:(NSInteger)minor OBJC_DESIGNATED_INITIALIZER;
@end

@class DOTTemplateMatcherResult;

/// Non-UI component for matching templates.
/// This component requires <code>DotFaceVerification</code> module to be active.
SWIFT_CLASS_NAMED("TemplateMatcher")
@interface DOTTemplateMatcher : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Match reference and probe face templates.
/// \param referenceTemplate Template
///
/// \param probeTemplate Template
///
///
/// returns:
/// Result with matching score.
- (DOTTemplateMatcherResult * _Nullable)matchWithReferenceTemplate:(DOTTemplate * _Nonnull)referenceTemplate probeTemplate:(DOTTemplate * _Nonnull)probeTemplate error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Match reference and probe face templates.
/// \param referenceTemplateBytes Reference template as <code>Data</code>.
///
/// \param probeTemplateBytes Probe template as <code>Data</code>.
///
///
/// returns:
/// Result with matching score.
- (DOTTemplateMatcherResult * _Nullable)matchWithReferenceTemplateBytes:(NSData * _Nonnull)referenceTemplateBytes probeTemplateBytes:(NSData * _Nonnull)probeTemplateBytes error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("Result")
@interface DOTTemplateMatcherResult : NSObject
@property (nonatomic, readonly) double score;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithScore:(double)score OBJC_DESIGNATED_INITIALIZER;
@end


enum DOTValueRangeStatus : NSInteger;

/// Representation of <code>Double</code> range, compatible with Objective-C.
/// The <code>max</code> must be greater than <code>min</code>.
SWIFT_CLASS_NAMED("ValueRange")
@interface DOTValueRange : NSObject
/// Minimal range value.
@property (nonatomic, readonly) double min;
/// Maximal range value.
@property (nonatomic, readonly) double max;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nullable instancetype)initWithMin:(double)min max:(double)max error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
/// Checks the status of <code>value</code> with respect to this range.
- (enum DOTValueRangeStatus)resolveStatusWithValue:(double)value SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
@end

/// Status of a value with respect to a range.
typedef SWIFT_ENUM_NAMED(NSInteger, DOTValueRangeStatus, "Status", open) {
  DOTValueRangeStatusInRange = 0,
  DOTValueRangeStatusTooLow = 1,
  DOTValueRangeStatusTooHigh = 2,
};


SWIFT_CLASS_NAMED("Wearables")
@interface DOTWearables : NSObject
@property (nonatomic, readonly, strong) DOTGlasses * _Nullable glasses;
@property (nonatomic, readonly, strong) DOTFaceAttribute * _Nullable mask;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithGlasses:(DOTGlasses * _Nullable)glasses mask:(DOTFaceAttribute * _Nullable)mask OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS_NAMED("WearablesQuery")
@interface DOTWearablesQuery : NSObject
@property (nonatomic, readonly) BOOL glasses;
@property (nonatomic, readonly) BOOL mask;
- (nonnull instancetype)init;
- (nonnull instancetype)initWithGlasses:(BOOL)glasses mask:(BOOL)mask OBJC_DESIGNATED_INITIALIZER;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.4 (swiftlang-1205.0.26.9 clang-1205.0.19.55)
#ifndef DOTFACECORE_SWIFT_H
#define DOTFACECORE_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Dispatch;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="DotFaceCore",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class DOTImageSize;
@class NSData;

/// Image with BGR888 pixel format.
SWIFT_CLASS_NAMED("BgrRawImage")
@interface DOTBgrRawImage : NSObject
/// Image size.
@property (nonatomic, readonly, strong) DOTImageSize * _Nonnull size;
/// Raw image data with BGR888 pixel format.
@property (nonatomic, copy) NSData * _Nonnull bytes;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Create <code>BgrRawImage</code> from raw image data with BGR888 pixel format.
- (nonnull instancetype)initWithBytes:(NSData * _Nonnull)bytes size:(DOTImageSize * _Nonnull)size;
@end



SWIFT_CLASS_NAMED("BgrRawImageFactory")
@interface DOTBgrRawImageFactory : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Return a copy of the <code>CGImage</code> as a <code>BgrRawImage</code>object.
/// \param cgImage Input image as a <code>CGImage</code> object.
///
///
/// returns:
/// New <code>BgrRawImage</code> instance.
+ (DOTBgrRawImage * _Nonnull)createWithCgImage:(CGImageRef _Nonnull)cgImage SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("CGImageFactory")
@interface DOTCGImageFactory : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Return a copy of the <code>BgrRawImage</code> as a <code>CGImage</code> object.
/// \param bgrRawImage Input image as a <code>BgrRawImage</code> object.
///
///
/// returns:
/// New <code>CGImage</code> instance.
+ (CGImageRef _Nonnull)createWithBgrRawImage:(DOTBgrRawImage * _Nonnull)bgrRawImage SWIFT_WARN_UNUSED_RESULT;
@end

/// Facing of the camera on the device.
typedef SWIFT_ENUM_NAMED(NSInteger, DOTCameraFacing, "CameraFacing", open) {
/// Front facing camera.
  DOTCameraFacingFront = 0,
/// Back facing camera.
  DOTCameraFacingBack = 1,
};

/// Indicates how the layer displays video frames.
typedef SWIFT_ENUM_NAMED(NSInteger, DOTCameraPreviewScaleType, "CameraPreviewScaleType", open) {
/// Entire video frame is displayed. Video frame is centered and fits within the preview layer bounds.
/// The preview layer may contain empty vertical or horizontal regions. This is recommended configuration, becuase it maximizes resolution of images captured during an auto capture process.
  DOTCameraPreviewScaleTypeFit = 0,
/// Entire preview layer is filled with video frame content. Video frame is centered and may extend beyond the preview layer bounds.
/// This configuration may produce images with lower resolution (compared to <code>fit</code> case) during an auto capture process.
  DOTCameraPreviewScaleTypeFill = 1,
};

typedef SWIFT_ENUM_NAMED(NSInteger, DOTCaptureStepId, "CaptureStepId", open) {
  DOTCaptureStepIdPresence = 0,
  DOTCaptureStepIdPosition = 1,
  DOTCaptureStepIdProximity = 2,
  DOTCaptureStepIdGlassStatus = 3,
  DOTCaptureStepIdBackgroundUniformity = 4,
  DOTCaptureStepIdPitchAngle = 5,
  DOTCaptureStepIdYawAngle = 6,
  DOTCaptureStepIdEyeStatus = 7,
  DOTCaptureStepIdMouthStatus = 8,
  DOTCaptureStepIdLight = 9,
  DOTCaptureStepIdMask = 10,
};

enum DOTQualityAttributeId : NSInteger;
@class DOTQualityAttribute;

/// This class contains default <code>QualityAttribute</code> for every <code>QualityAttributeId</code>.
SWIFT_CLASS_NAMED("DefaultQualityAttributeRegistry")
@interface DOTDefaultQualityAttributeRegistry : NSObject
/// Returns default <code>QualityAttribute</code> for <code>QualityAttributeId</code>.
- (DOTQualityAttribute * _Nonnull)findById:(enum DOTQualityAttributeId)qualityAttributeId SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSNumber;
@class DOTTemplate;
@class DOTFaceQuality;
@class DOTFaceQualityQuery;
@class DOTFaceAttribute;
@class DOTFaceAspects;

/// Result of face detection or face auto capture process.
SWIFT_CLASS_NAMED("DetectedFace")
@interface DOTDetectedFace : NSObject
/// Original input image.
@property (nonatomic, readonly, strong) DOTBgrRawImage * _Nonnull image;
/// Face detection confidence score.
@property (nonatomic, readonly) double confidence;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Create face template.
/// This method requires <code>DotFaceVerification</code> module to be active. This method should be called on the background thread.
- (DOTTemplate * _Nullable)createTemplateAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Returns ICAO Full Frontal face image.
/// If bounding box overlaps the image, white background is added to overlapping part. This method should be called on the background thread.
- (DOTBgrRawImage * _Nullable)createFullFrontalImageAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Evaluation of all available face quality attributes.
/// This method should be called on the background thread.
- (DOTFaceQuality * _Nullable)evaluateFaceQualityAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Evaluation of specific set of face quality attributes.
/// If you want to evaluate background uniformity, you need <code>DotFaceBackgroundUniformity</code> module to be active.  This method should be called on the background thread.
- (DOTFaceQuality * _Nullable)evaluateFaceQualityWithFaceQualityQuery:(DOTFaceQualityQuery * _Nonnull)faceQualityQuery error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Evaluation of passive liveness.
/// This method requires <code>DotFacePassiveLiveness</code> module to be active. This method should be called on the background thread.
- (DOTFaceAttribute * _Nullable)evaluatePassiveLivenessAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Evaluation of face aspects.
/// This method should be called on the background thread.
- (DOTFaceAspects * _Nullable)evaluateFaceAspectsAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end

@class NSString;
@protocol DotFaceDelegate;
@class DotFaceConfiguration;

/// Class responsible for <code>DotFace</code> framework life cycle.
SWIFT_CLASS("_TtC11DotFaceCore7DotFace")
@interface DotFace : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) DotFace * _Nonnull shared;)
+ (DotFace * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// <code>DotFace</code> framework version.
@property (nonatomic, readonly, copy) NSString * _Nonnull versionName;
/// License ID used for generating license file.
@property (nonatomic, readonly, copy) NSString * _Nonnull licenseId;
/// Flag describing initialization state of <code>DotFace</code> framework.
/// It is safe to access this property only after you have received the delegate callback notifying you that the initialization/deinitialization process has finished.
@property (nonatomic, readonly) BOOL isInitialized;
/// Set delegate and <code>DispatchQueue</code> on which you want to recieve the delegate callbacks. <code>DotFace</code> will hold weak reference to <code>delegate</code> and <code>queue</code>.
- (void)setDelegate:(id <DotFaceDelegate> _Nullable)delegate queue:(dispatch_queue_t _Nullable)queue;
/// This method will initialize <code>DotFace</code> framework asynchronously and it will fire delegate callback after it will finish.
/// \param configuration This parameter specifies how <code>DotFace</code> framework should be configured.
///
- (void)initializeWithConfiguration:(DotFaceConfiguration * _Nonnull)configuration;
/// This method will deinitialize <code>DotFace</code> framework and free up allocated memory asynchronously. This method will fire delegate callback after it will finish.
- (void)deinitialize;
@end

enum DotFaceResultCode : NSInteger;

SWIFT_CLASS_NAMED("Result")
@interface DotFaceResult : NSObject
@property (nonatomic, readonly) enum DotFaceResultCode code;
@property (nonatomic, readonly) NSError * _Nullable error;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithCode:(enum DotFaceResultCode)code error:(NSError * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, DotFaceResultCode, "Code", open) {
  DotFaceResultCodeOk = 0,
  DotFaceResultCodeError = 1,
};


@protocol DotFaceModule;

/// Use this to configure <code>DotFace</code> framework.
SWIFT_CLASS("_TtC11DotFaceCore20DotFaceConfiguration")
@interface DotFaceConfiguration : NSObject
/// Raw licensing data.
@property (nonatomic, readonly, copy) NSData * _Nonnull license;
/// List of modules to load during initialization.
@property (nonatomic, readonly, copy) NSArray<id <DotFaceModule>> * _Nonnull modules;
/// Face detection confidence threshold, value in range [0.0, 1.0]. Default is 0.06.
@property (nonatomic, readonly) double faceDetectionConfidenceThreshold;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithLicense:(NSData * _Nonnull)license modules:(NSArray<id <DotFaceModule>> * _Nonnull)modules;
- (nullable instancetype)initWithLicense:(NSData * _Nonnull)license modules:(NSArray<id <DotFaceModule>> * _Nonnull)modules faceDetectionConfidenceThreshold:(double)faceDetectionConfidenceThreshold error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP11DotFaceCore15DotFaceDelegate_")
@protocol DotFaceDelegate
- (void)dotFaceInitializationFinished:(DotFace * _Nonnull)dotFace result:(DotFaceResult * _Nonnull)result;
- (void)dotFaceDeinitializationFinished:(DotFace * _Nonnull)dotFace result:(DotFaceResult * _Nonnull)result;
@end

enum DotFaceModuleId : NSInteger;
@class DotFaceModuleCategoryWrapper;
@class NSURL;

SWIFT_PROTOCOL("_TtP11DotFaceCore13DotFaceModule_")
@protocol DotFaceModule
@property (nonatomic, readonly, copy) NSString * _Nonnull versionName;
@property (nonatomic, readonly) enum DotFaceModuleId moduleId;
@property (nonatomic, readonly, copy) NSArray<DotFaceModuleCategoryWrapper *> * _Nonnull dependencies;
@property (nonatomic, readonly, copy) NSURL * _Nonnull modelsUrl;
@end

typedef SWIFT_ENUM(NSInteger, DotFaceModuleCategory, open) {
  DotFaceModuleCategoryDetection = 0,
  DotFaceModuleCategoryVerification = 1,
  DotFaceModuleCategoryEyeGazeLiveness = 2,
  DotFaceModuleCategoryPassiveLiveness = 3,
  DotFaceModuleCategoryBackgroundUniformity = 4,
};


SWIFT_CLASS("_TtC11DotFaceCore28DotFaceModuleCategoryWrapper")
@interface DotFaceModuleCategoryWrapper : NSObject
@property (nonatomic, readonly) enum DotFaceModuleCategory moduleCategory;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithModuleCategory:(enum DotFaceModuleCategory)moduleCategory OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end

typedef SWIFT_ENUM(NSInteger, DotFaceModuleId, open) {
  DotFaceModuleIdDetectionFast = 0,
  DotFaceModuleIdDetectionBalanced = 1,
  DotFaceModuleIdVerification = 2,
  DotFaceModuleIdEyeGazeLiveness = 3,
  DotFaceModuleIdPassiveLiveness = 4,
  DotFaceModuleIdBackgroundUniformity = 5,
};

@class DOTEyesExpression;

SWIFT_CLASS_NAMED("Expression")
@interface DOTExpression : NSObject
@property (nonatomic, readonly, strong) DOTEyesExpression * _Nullable eyes;
@property (nonatomic, readonly, strong) DOTFaceAttribute * _Nullable mouth;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithEyes:(DOTEyesExpression * _Nullable)eyes mouth:(DOTFaceAttribute * _Nullable)mouth OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end

@class DOTEyesExpressionQuery;

SWIFT_CLASS_NAMED("ExpressionQuery")
@interface DOTExpressionQuery : NSObject
@property (nonatomic, readonly, strong) DOTEyesExpressionQuery * _Nonnull eyes;
@property (nonatomic, readonly) BOOL mouth;
- (nonnull instancetype)init;
- (nonnull instancetype)initWithEyes:(DOTEyesExpressionQuery * _Nonnull)eyes mouth:(BOOL)mouth OBJC_DESIGNATED_INITIALIZER;
@end

@class DOTSegment;
enum DOTEyeGazeLivenessTransitionType : NSInteger;
@class UIImage;

/// Eye gaze liveness configuration options.
SWIFT_CLASS_NAMED("EyeGazeLivenessConfiguration")
@interface DOTEyeGazeLivenessConfiguration : NSObject
/// Ratio used for calculating minimal face size in image in range [0.0, 1.0]. Default is <code>0.1</code>.
@property (nonatomic, readonly) double minFaceSizeRatio;
/// Ratio used for calculating maximal face size in image in range [0.0, 1.0]. Default is <code>0.3</code>.
@property (nonatomic, readonly) double maxFaceSizeRatio;
/// Proximity tolerance defines valid distance from device in range [0.0, 1.0]. Default is <code>0.5</code>.
@property (nonatomic, readonly) double proximityTolerance;
/// Array of segments which will be used for eye gaze liveness.
@property (nonatomic, readonly, copy) NSArray<DOTSegment *> * _Nonnull segments;
/// Minimal required number of valid segments. Must be in range [4, 7]. Default is <code>4</code>.
@property (nonatomic, readonly) NSInteger minValidSegmentCount;
/// Transition type. Default is <code>.move</code>.
@property (nonatomic, readonly) enum DOTEyeGazeLivenessTransitionType transitionType;
/// The moving object image.
@property (nonatomic, readonly, strong) UIImage * _Nonnull objectImage;
/// Size of the moving object. Default is <code>CGSize(width: 50, height: 50)</code>.
@property (nonatomic, readonly) CGSize objectImageSize;
- (nonnull instancetype)init;
- (nullable instancetype)initWithTransitionType:(enum DOTEyeGazeLivenessTransitionType)transitionType segments:(NSArray<DOTSegment *> * _Nonnull)segments minValidSegmentCount:(NSInteger)minValidSegmentCount minFaceSizeRatio:(double)minFaceSizeRatio maxFaceSizeRatio:(double)maxFaceSizeRatio objectImage:(UIImage * _Nullable)objectImage objectImageSize:(CGSize)objectImageSize proximityTolerance:(double)proximityTolerance error:(NSError * _Nullable * _Nullable)error;
@end

/// Eye gaze liveness available transition types.
typedef SWIFT_ENUM_NAMED(NSInteger, DOTEyeGazeLivenessTransitionType, "TransitionType", open) {
/// Object is moving.
  DOTEyeGazeLivenessTransitionTypeMove = 0,
/// Object is fading.
  DOTEyeGazeLivenessTransitionTypeFade = 1,
};

typedef SWIFT_ENUM_NAMED(NSInteger, DOTEyeGazeLivenessState, "EyeGazeLivenessState", open) {
  DOTEyeGazeLivenessStateOk = 0,
  DOTEyeGazeLivenessStateNoFace = 1,
  DOTEyeGazeLivenessStateLostFace = 2,
  DOTEyeGazeLivenessStateLowQualityFace = 3,
  DOTEyeGazeLivenessStateFaceTooClose = 4,
  DOTEyeGazeLivenessStateFaceTooFar = 5,
};

@class UIColor;
@class UIFont;

/// Eye gaze liveness user interface customization options.
SWIFT_CLASS_NAMED("EyeGazeLivenessStyle")
@interface DOTEyeGazeLivenessStyle : NSObject
/// Background color of top level view.
@property (nonatomic, readonly, strong) UIColor * _Nonnull backgroundColor;
/// Moving object color.
@property (nonatomic, readonly, strong) UIColor * _Nonnull objectColor;
/// Hint label font.
@property (nonatomic, readonly, strong) UIFont * _Nonnull hintFont;
/// Hint label text color.
@property (nonatomic, readonly, strong) UIColor * _Nonnull hintTextColor;
/// Hint view background color.
@property (nonatomic, readonly, strong) UIColor * _Nonnull hintBackgroundColor;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithBackgroundColor:(UIColor * _Nonnull)backgroundColor objectColor:(UIColor * _Nonnull)objectColor hintFont:(UIFont * _Nonnull)hintFont hintTextColor:(UIColor * _Nonnull)hintTextColor hintBackgroundColor:(UIColor * _Nonnull)hintBackgroundColor OBJC_DESIGNATED_INITIALIZER;
@end

@protocol DOTEyeGazeLivenessViewControllerDelegate;
@class NSBundle;
@class NSCoder;

/// UI component for evaluating liveness by tracking eye gaze.
/// This component requires <code>DotFaceEyeGazeLiveness</code> module to be active.
SWIFT_CLASS_NAMED("EyeGazeLivenessViewController")
@interface DOTEyeGazeLivenessViewController : UIViewController
/// Current configuration.
@property (nonatomic, readonly, strong) DOTEyeGazeLivenessConfiguration * _Nonnull configuration;
/// Current style.
@property (nonatomic, readonly, strong) DOTEyeGazeLivenessStyle * _Nonnull style;
/// Set this delegate to handle eye gaze liveness events.
@property (nonatomic, weak) id <DOTEyeGazeLivenessViewControllerDelegate> _Nullable delegate;
/// Create new instance of <code>EyeGazeLivenessViewController</code>.
/// \param configuration Configure functionality.
///
/// \param style Customize user interface.
///
+ (DOTEyeGazeLivenessViewController * _Nonnull)createWithConfiguration:(DOTEyeGazeLivenessConfiguration * _Nonnull)configuration style:(DOTEyeGazeLivenessStyle * _Nonnull)style SWIFT_WARN_UNUSED_RESULT;
/// Start liveness detection process.
- (void)start;
/// Stop liveness detection process asynchronously. Wait for delegate callback <code>eyeGazeLivenessViewControllerStopped()</code>.
- (void)stopAsync;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end




@protocol UIViewControllerTransitionCoordinator;

@interface DOTEyeGazeLivenessViewController (SWIFT_EXTENSION(DotFaceCore))
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewDidDisappear:(BOOL)animated;
- (void)viewDidLayoutSubviews;
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
@end


@class DOTSegmentImage;

/// Implement this delegate to handle eye gaze liveness events.
SWIFT_PROTOCOL_NAMED("EyeGazeLivenessViewControllerDelegate")
@protocol DOTEyeGazeLivenessViewControllerDelegate
@optional
- (void)eyeGazeLivenessViewControllerViewDidLoad:(DOTEyeGazeLivenessViewController * _Nonnull)viewController;
- (void)eyeGazeLivenessViewControllerViewDidLayoutSubviews:(DOTEyeGazeLivenessViewController * _Nonnull)viewController;
- (void)eyeGazeLivenessViewControllerViewWillAppear:(DOTEyeGazeLivenessViewController * _Nonnull)viewController;
- (void)eyeGazeLivenessViewControllerViewDidAppear:(DOTEyeGazeLivenessViewController * _Nonnull)viewController;
- (void)eyeGazeLivenessViewControllerViewWillDisappear:(DOTEyeGazeLivenessViewController * _Nonnull)viewController;
- (void)eyeGazeLivenessViewControllerViewDidDisappear:(DOTEyeGazeLivenessViewController * _Nonnull)viewController;
- (void)eyeGazeLivenessViewControllerViewWillTransition:(DOTEyeGazeLivenessViewController * _Nonnull)viewController;
/// Tells the delegate that you have no permission for camera usage.
- (void)eyeGazeLivenessViewControllerNoCameraPermission:(DOTEyeGazeLivenessViewController * _Nonnull)viewController;
/// Tells the delegate that the component has stopped.
- (void)eyeGazeLivenessViewControllerStopped:(DOTEyeGazeLivenessViewController * _Nonnull)viewController;
@required
/// Tells the delegate that the eye gaze liveness state has changed.
- (void)eyeGazeLivenessViewController:(DOTEyeGazeLivenessViewController * _Nonnull)viewController stateChanged:(enum DOTEyeGazeLivenessState)state;
/// Tells the delegate that eye gaze liveness has finished with score and captured segments. This callback is called after the component has stopped.
- (void)eyeGazeLivenessViewController:(DOTEyeGazeLivenessViewController * _Nonnull)viewController finished:(float)score with:(NSArray<DOTSegmentImage *> * _Nonnull)segmentImages;
/// Tells the delegate that eye gaze liveness cannot continue because there are no segments left. This callback is called after the component has stopped.
- (void)eyeGazeLivenessViewControllerNoMoreSegments:(DOTEyeGazeLivenessViewController * _Nonnull)viewController;
/// Tells the delegate that eye gaze liveness failed, because no eyes were detected. This callback is called after the component has stopped.
- (void)eyeGazeLivenessViewControllerEyesNotDetected:(DOTEyeGazeLivenessViewController * _Nonnull)viewController;
/// Tells the delegate that face tracking has failed. This callback is called after the component has stopped.
- (void)eyeGazeLivenessViewControllerFaceTrackingFailed:(DOTEyeGazeLivenessViewController * _Nonnull)viewController;
@end


SWIFT_CLASS_NAMED("EyesExpression")
@interface DOTEyesExpression : NSObject
@property (nonatomic, readonly, strong) DOTFaceAttribute * _Nullable rightEye;
@property (nonatomic, readonly, strong) DOTFaceAttribute * _Nullable leftEye;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithRightEye:(DOTFaceAttribute * _Nullable)rightEye leftEye:(DOTFaceAttribute * _Nullable)leftEye OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS_NAMED("EyesExpressionQuery")
@interface DOTEyesExpressionQuery : NSObject
@property (nonatomic, readonly) BOOL rightEye;
@property (nonatomic, readonly) BOOL leftEye;
- (nonnull instancetype)init;
- (nonnull instancetype)initWithRightEye:(BOOL)rightEye leftEye:(BOOL)leftEye OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("FaceAspects")
@interface DOTFaceAspects : NSObject
@property (nonatomic, readonly) NSInteger eyeDistance;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithEyeDistance:(NSInteger)eyeDistance OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS_NAMED("FaceAttribute")
@interface DOTFaceAttribute : NSObject
@property (nonatomic, readonly) double score;
@property (nonatomic, readonly) BOOL preconditionsMet;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithScore:(double)score preconditionsMet:(BOOL)preconditionsMet OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// Face auto capture configuration options.
SWIFT_CLASS_NAMED("FaceAutoCaptureConfiguration")
@interface DOTFaceAutoCaptureConfiguration : NSObject
/// Ratio used for calculating minimal face size in image in range [0.0, 1.0]. Default is <code>0.1</code>.
@property (nonatomic, readonly) double minFaceSizeRatio;
/// Ratio used for calculating maximal face size in image in range [0.0, 1.0]. Default is <code>0.3</code>.
@property (nonatomic, readonly) double maxFaceSizeRatio;
/// Indicates if tick animation should be performed after succesfull capture. Default is <code>false</code>.
@property (nonatomic, readonly) BOOL isCheckAnimationEnabled;
/// Specify camera facing. Default is <code>.front</code>.
@property (nonatomic, readonly) enum DOTCameraFacing cameraFacing;
/// Specify camera preview scale type. Default is <code>.fit</code>.
@property (nonatomic, readonly) enum DOTCameraPreviewScaleType cameraPreviewScaleType;
/// Quality attributes of face capture result.
@property (nonatomic, readonly, copy) NSSet<DOTQualityAttribute *> * _Nonnull qualityAttributes;
/// Configure the face auto capture process.
/// \param minFaceSizeRatio Ratio used for calculating minimal face size in image.
///
/// \param maxFaceSizeRatio Ratio used for calculating maximal face size in image.
///
/// \param isCheckAnimationEnabled Indicates if tick animation should be performed after succesfull capture.
///
/// \param cameraFacing Specify camera facing.
///
/// \param cameraPreviewScaleType Specify camera preview scale type.
///
/// \param qualityAttributes Configure desired quality attributes of the face capture result.
///
- (nonnull instancetype)initWithMinFaceSizeRatio:(double)minFaceSizeRatio maxFaceSizeRatio:(double)maxFaceSizeRatio isCheckAnimationEnabled:(BOOL)isCheckAnimationEnabled cameraFacing:(enum DOTCameraFacing)cameraFacing cameraPreviewScaleType:(enum DOTCameraPreviewScaleType)cameraPreviewScaleType qualityAttributes:(NSSet<DOTQualityAttribute *> * _Nonnull)qualityAttributes;
/// Configure the face auto capture process with default values.
- (nonnull instancetype)init;
@end


/// Face auto capture user interface customization options.
SWIFT_CLASS_NAMED("FaceAutoCaptureStyle")
@interface DOTFaceAutoCaptureStyle : NSObject
/// Background color of top level view.
@property (nonatomic, readonly, strong) UIColor * _Nonnull backgroundColor;
/// Background color of overlay view.
@property (nonatomic, readonly, strong) UIColor * _Nonnull backgroundOverlayColor;
/// Color of circle in overlay view.
@property (nonatomic, readonly, strong) UIColor * _Nonnull circleOutlineColor;
/// Tracking circle color.
@property (nonatomic, readonly, strong) UIColor * _Nonnull trackingCircleColor;
/// Overlay circle color for finished state.
@property (nonatomic, readonly, strong) UIColor * _Nonnull progressValidColor;
/// Overlay circle color for almost fulfilled state.
@property (nonatomic, readonly, strong) UIColor * _Nonnull progressIntermediateColor;
/// Overlay circle color for not fulfilled state.
@property (nonatomic, readonly, strong) UIColor * _Nonnull progressInvalidColor;
/// Animated tick color.
@property (nonatomic, readonly, strong) UIColor * _Nonnull tickColor;
/// Hint label font.
@property (nonatomic, readonly, strong) UIFont * _Nonnull hintFont;
/// Hint label text color.
@property (nonatomic, readonly, strong) UIColor * _Nonnull hintTextColor;
/// Hint view background color.
@property (nonatomic, readonly, strong) UIColor * _Nonnull hintBackgroundColor;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithBackgroundColor:(UIColor * _Nonnull)backgroundColor backgroundOverlayColor:(UIColor * _Nonnull)backgroundOverlayColor circleOutlineColor:(UIColor * _Nonnull)circleOutlineColor trackingCircleColor:(UIColor * _Nonnull)trackingCircleColor progressValidColor:(UIColor * _Nonnull)progressValidColor progressIntermediateColor:(UIColor * _Nonnull)progressIntermediateColor progressInvalidColor:(UIColor * _Nonnull)progressInvalidColor tickColor:(UIColor * _Nonnull)tickColor hintFont:(UIFont * _Nonnull)hintFont hintTextColor:(UIColor * _Nonnull)hintTextColor hintBackgroundColor:(UIColor * _Nonnull)hintBackgroundColor OBJC_DESIGNATED_INITIALIZER;
@end

@protocol DOTFaceAutoCaptureViewControllerDelegate;

/// UI component for capturing high quality face images.
/// This component requires <code>DotFaceDetection*</code> module to be active.
/// If you want to evaluate background uniformity during the face auto capture process, you will need <code>DotFaceBackgroundUniformity</code> module to be active.
/// If you want to evaluate face mask during the face auto capture process, you will need <code>DotFaceDetectionBalanced</code> module to be active.
SWIFT_CLASS_NAMED("FaceAutoCaptureViewController")
@interface DOTFaceAutoCaptureViewController : UIViewController
/// Current configuration.
@property (nonatomic, readonly, strong) DOTFaceAutoCaptureConfiguration * _Nonnull configuration;
/// Current style.
@property (nonatomic, readonly, strong) DOTFaceAutoCaptureStyle * _Nonnull style;
/// Set this delegate to handle face auto capture events.
@property (nonatomic, weak) id <DOTFaceAutoCaptureViewControllerDelegate> _Nullable delegate;
/// Create new instance of <code>FaceAutoCaptureViewController</code>.
/// \param configuration Configure functionality.
///
/// \param style Customize user interface.
///
+ (DOTFaceAutoCaptureViewController * _Nonnull)createWithConfiguration:(DOTFaceAutoCaptureConfiguration * _Nonnull)configuration style:(DOTFaceAutoCaptureStyle * _Nonnull)style SWIFT_WARN_UNUSED_RESULT;
/// Start face auto capture process.
- (void)start;
/// Stop face auto capture process asynchronously. Wait for delegate callback <code>faceAutoCaptureViewControllerStopped()</code>.
- (void)stopAsync;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end




@interface DOTFaceAutoCaptureViewController (SWIFT_EXTENSION(DotFaceCore))
- (void)viewDidLoad;
- (void)viewDidLayoutSubviews;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
- (void)viewDidDisappear:(BOOL)animated;
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
@end




/// Implement this delegate to handle face auto capture events.
SWIFT_PROTOCOL_NAMED("FaceAutoCaptureViewControllerDelegate")
@protocol DOTFaceAutoCaptureViewControllerDelegate
@optional
- (void)faceAutoCaptureViewControllerViewDidLoad:(DOTFaceAutoCaptureViewController * _Nonnull)viewController;
- (void)faceAutoCaptureViewControllerViewDidLayoutSubviews:(DOTFaceAutoCaptureViewController * _Nonnull)viewController;
- (void)faceAutoCaptureViewControllerViewWillAppear:(DOTFaceAutoCaptureViewController * _Nonnull)viewController;
- (void)faceAutoCaptureViewControllerViewDidAppear:(DOTFaceAutoCaptureViewController * _Nonnull)viewController;
- (void)faceAutoCaptureViewControllerViewWillDisappear:(DOTFaceAutoCaptureViewController * _Nonnull)viewController;
- (void)faceAutoCaptureViewControllerViewDidDisappear:(DOTFaceAutoCaptureViewController * _Nonnull)viewController;
- (void)faceAutoCaptureViewControllerViewWillTransition:(DOTFaceAutoCaptureViewController * _Nonnull)viewController;
/// Tells the delegate that you have no permission for camera usage.
- (void)faceAutoCaptureViewControllerNoCameraPermission:(DOTFaceAutoCaptureViewController * _Nonnull)viewController;
/// Tells the delegate that the component has stopped.
- (void)faceAutoCaptureViewControllerStopped:(DOTFaceAutoCaptureViewController * _Nonnull)viewController;
@required
/// Tells the delegate that the capture step has changed.
- (void)faceAutoCaptureViewController:(DOTFaceAutoCaptureViewController * _Nonnull)viewController stepChanged:(enum DOTCaptureStepId)captureStepId with:(DOTDetectedFace * _Nullable)detectedFace;
/// Tells the delegate that the face was captured. This callback is called after the component has stopped.
- (void)faceAutoCaptureViewController:(DOTFaceAutoCaptureViewController * _Nonnull)viewController captured:(DOTDetectedFace * _Nonnull)detectedFace;
@end

@class DOTFaceImage;

/// Non-UI component for detecting faces in an image.
/// This component requires <code>DotFaceDetection*</code> module to be active.
SWIFT_CLASS_NAMED("FaceDetector")
@interface DOTFaceDetector : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Detect faces in an image.
/// \param faceImage Face image
///
/// \param maximumFaces Maximum number of faces to detect.
///
///
/// returns:
/// Array of detected faces.
- (NSArray<DOTDetectedFace *> * _Nonnull)detectWithFaceImage:(DOTFaceImage * _Nonnull)faceImage maximumFaces:(NSInteger)maximumFaces SWIFT_WARN_UNUSED_RESULT;
@end

/// Available face features.
typedef SWIFT_ENUM_NAMED(NSInteger, DOTFaceFeature, "FaceFeature", open) {
  DOTFaceFeatureRightEyeOuterCorner = 0,
  DOTFaceFeatureRightEyeCenter = 1,
  DOTFaceFeatureRightEyeInnerCorner = 2,
  DOTFaceFeatureLeftEyeOuterCorner = 3,
  DOTFaceFeatureLeftEyeCenter = 4,
  DOTFaceFeatureLeftEyeInnerCorner = 5,
  DOTFaceFeatureNoseRoot = 6,
  DOTFaceFeatureNoseRightBottom = 7,
  DOTFaceFeatureNoseTip = 8,
  DOTFaceFeatureNoseLeftBottom = 9,
  DOTFaceFeatureNoseBottom = 10,
  DOTFaceFeatureMouthRightCorner = 11,
  DOTFaceFeatureMouthCenter = 12,
  DOTFaceFeatureMouthLeftCorner = 13,
  DOTFaceFeatureMouthUpperEdge = 14,
  DOTFaceFeatureMouthLowerEdge = 15,
  DOTFaceFeatureRightEyebrowOuterEdge = 16,
  DOTFaceFeatureRightEyebrowInnerEdge = 17,
  DOTFaceFeatureLeftEyebrowOuterEdge = 18,
  DOTFaceFeatureLeftEyebrowInnerEdge = 19,
  DOTFaceFeatureFaceRightEdge = 20,
  DOTFaceFeatureFaceChinTip = 21,
  DOTFaceFeatureFaceLeftEdge = 22,
};


/// Face feature point contains face feature, point and score.
SWIFT_CLASS_NAMED("FaceFeaturePoint")
@interface DOTFaceFeaturePoint : NSObject
/// Face feature.
@property (nonatomic, readonly) enum DOTFaceFeature feature;
/// Position point of the face feature.
@property (nonatomic, readonly) CGPoint point;
/// Score of the face feature.
@property (nonatomic, readonly) float score;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithFeature:(enum DOTFaceFeature)feature point:(CGPoint)point score:(float)score OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// Face feature wrapper.
SWIFT_CLASS_NAMED("FaceFeatureWrapper")
@interface DOTFaceFeatureWrapper : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithFeature:(enum DOTFaceFeature)feature OBJC_DESIGNATED_INITIALIZER;
/// Get face feature description.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// Face image is used for detection and verification.
SWIFT_CLASS_NAMED("FaceImage")
@interface DOTFaceImage : NSObject
/// Raw image.
@property (nonatomic, readonly, strong) DOTBgrRawImage * _Nonnull image;
/// Minimal face size used for detection in pixels.
@property (nonatomic, readonly) NSInteger minFaceSizePixels;
/// Maximal face size used for detection in pixels.
@property (nonatomic, readonly) NSInteger maxFaceSizePixels;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS("_TtC11DotFaceCore16FaceImageFactory")
@interface FaceImageFactory : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Create face image from raw image and face size ranges.
/// \param image Raw image.
///
/// \param minFaceSizeRatio Minimum face size to shorter image side ratio. This defines size of searched face in the image.
/// Valid values are in interval [0.0, 1.0]. Must be lesser than <code>maxFaceSizeRatio</code>.
/// Must be greater than or equal to minimal valid face size, which depends on the active detection module.
///
/// \param maxFaceSizeRatio Maximum face size to shorter image side ratio. This defines size of searched face in the image. Valid values are in interval [0.0, 1.0].
///
///
/// returns:
/// New face image object.
+ (DOTFaceImage * _Nullable)createWithImage:(DOTBgrRawImage * _Nonnull)image minFaceSizeRatio:(double)minFaceSizeRatio maxFaceSizeRatio:(double)maxFaceSizeRatio error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("FaceImageQuality")
@interface DOTFaceImageQuality : NSObject
@property (nonatomic, readonly, strong) DOTFaceAttribute * _Nullable sharpness;
@property (nonatomic, readonly, strong) DOTFaceAttribute * _Nullable brightness;
@property (nonatomic, readonly, strong) DOTFaceAttribute * _Nullable contrast;
@property (nonatomic, readonly, strong) DOTFaceAttribute * _Nullable uniqueIntensityLevels;
@property (nonatomic, readonly, strong) DOTFaceAttribute * _Nullable shadow;
@property (nonatomic, readonly, strong) DOTFaceAttribute * _Nullable specularity;
@property (nonatomic, readonly, strong) DOTFaceAttribute * _Nullable backgroundUniformity;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithSharpness:(DOTFaceAttribute * _Nullable)sharpness brightness:(DOTFaceAttribute * _Nullable)brightness contrast:(DOTFaceAttribute * _Nullable)contrast uniqueIntensityLevels:(DOTFaceAttribute * _Nullable)uniqueIntensityLevels shadow:(DOTFaceAttribute * _Nullable)shadow specularity:(DOTFaceAttribute * _Nullable)specularity backgroundUniformity:(DOTFaceAttribute * _Nullable)backgroundUniformity OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS_NAMED("FaceImageQualityQuery")
@interface DOTFaceImageQualityQuery : NSObject
@property (nonatomic, readonly) BOOL sharpness;
@property (nonatomic, readonly) BOOL brightness;
@property (nonatomic, readonly) BOOL contrast;
@property (nonatomic, readonly) BOOL uniqueIntensityLevels;
@property (nonatomic, readonly) BOOL shadow;
@property (nonatomic, readonly) BOOL specularity;
@property (nonatomic, readonly) BOOL backgroundUniformity;
- (nonnull instancetype)init;
- (nonnull instancetype)initWithSharpness:(BOOL)sharpness brightness:(BOOL)brightness contrast:(BOOL)contrast uniqueIntensityLevels:(BOOL)uniqueIntensityLevels shadow:(BOOL)shadow specularity:(BOOL)specularity backgroundUniformity:(BOOL)backgroundUniformity OBJC_DESIGNATED_INITIALIZER;
@end

@class DOTFaceMatcherResult;

/// Non-UI component for matching face images and templates.
/// This component requires <code>DotFaceVerification</code> module to be active.
SWIFT_CLASS_NAMED("FaceMatcher")
@interface DOTFaceMatcher : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Match face image against reference face image.
/// \param referenceFaceImage Face image
///
/// \param probeFaceImage Face image
///
///
/// returns:
/// Result with matching score.
- (DOTFaceMatcherResult * _Nullable)matchWithReferenceFaceImage:(DOTFaceImage * _Nonnull)referenceFaceImage probeFaceImage:(DOTFaceImage * _Nonnull)probeFaceImage error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Match face image against reference template.
/// \param referenceTemplate Reference template.
///
/// \param probeFaceImage Face image.
///
///
/// returns:
/// Result with matching score.
- (DOTFaceMatcherResult * _Nullable)matchWithReferenceTemplate:(DOTTemplate * _Nonnull)referenceTemplate probeFaceImage:(DOTFaceImage * _Nonnull)probeFaceImage error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Match face image against reference template.
/// \param referenceTemplateBytes Reference template as <code>Data</code>.
///
/// \param probeFaceImage Face image.
///
///
/// returns:
/// Result with matching score.
- (DOTFaceMatcherResult * _Nullable)matchWithReferenceTemplateBytes:(NSData * _Nonnull)referenceTemplateBytes probeFaceImage:(DOTFaceImage * _Nonnull)probeFaceImage error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("Result")
@interface DOTFaceMatcherResult : NSObject
@property (nonatomic, readonly) double score;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithScore:(double)score OBJC_DESIGNATED_INITIALIZER;
@end

@class DOTHeadPose;
@class DOTWearables;

SWIFT_CLASS_NAMED("FaceQuality")
@interface DOTFaceQuality : NSObject
@property (nonatomic, readonly, strong) DOTFaceImageQuality * _Nullable imageQuality;
@property (nonatomic, readonly, strong) DOTHeadPose * _Nullable headPose;
@property (nonatomic, readonly, strong) DOTWearables * _Nullable wearables;
@property (nonatomic, readonly, strong) DOTExpression * _Nullable expression;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithImageQuality:(DOTFaceImageQuality * _Nullable)imageQuality headPose:(DOTHeadPose * _Nullable)headPose wearables:(DOTWearables * _Nullable)wearables expression:(DOTExpression * _Nullable)expression OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end

@class DOTHeadPoseQuery;
@class DOTWearablesQuery;

SWIFT_CLASS_NAMED("FaceQualityQuery")
@interface DOTFaceQualityQuery : NSObject
@property (nonatomic, readonly, strong) DOTFaceImageQualityQuery * _Nonnull imageQuality;
@property (nonatomic, readonly, strong) DOTHeadPoseQuery * _Nonnull headPose;
@property (nonatomic, readonly, strong) DOTWearablesQuery * _Nonnull wearables;
@property (nonatomic, readonly, strong) DOTExpressionQuery * _Nonnull expression;
- (nonnull instancetype)init;
- (nonnull instancetype)initWithImageQuality:(DOTFaceImageQualityQuery * _Nonnull)imageQuality headPose:(DOTHeadPoseQuery * _Nonnull)headPose wearables:(DOTWearablesQuery * _Nonnull)wearables expression:(DOTExpressionQuery * _Nonnull)expression OBJC_DESIGNATED_INITIALIZER;
@end


/// Face simple capture configuration options.
SWIFT_CLASS_NAMED("FaceSimpleCaptureConfiguration")
@interface DOTFaceSimpleCaptureConfiguration : NSObject
/// Ratio used for calculating minimal face size in image in range [0.0, 1.0]. Default is <code>0.1</code>.
@property (nonatomic, readonly) double minFaceSizeRatio;
/// Ratio used for calculating maximal face size in image in range [0.0, 1.0]. Default is <code>0.3</code>.
@property (nonatomic, readonly) double maxFaceSizeRatio;
/// Specify camera facing. Default is <code>.front</code>.
@property (nonatomic, readonly) enum DOTCameraFacing cameraFacing;
/// Specify camera preview scale type. Default is <code>.fit</code>.
@property (nonatomic, readonly) enum DOTCameraPreviewScaleType cameraPreviewScaleType;
/// Configure the face simple capture process.
/// \param minFaceSizeRatio Ratio used for calculating minimal face size in image.
///
/// \param maxFaceSizeRatio Ratio used for calculating maximal face size in image.
///
/// \param cameraFacing Specify camera facing.
///
/// \param cameraPreviewScaleType Specify camera preview scale type.
///
- (nonnull instancetype)initWithMinFaceSizeRatio:(double)minFaceSizeRatio maxFaceSizeRatio:(double)maxFaceSizeRatio cameraFacing:(enum DOTCameraFacing)cameraFacing cameraPreviewScaleType:(enum DOTCameraPreviewScaleType)cameraPreviewScaleType;
/// Configure the face simple capture process with default values.
- (nonnull instancetype)init;
@end


/// Face simple capture user interface customization options.
SWIFT_CLASS_NAMED("FaceSimpleCaptureStyle")
@interface DOTFaceSimpleCaptureStyle : NSObject
/// Background color of top level view.
@property (nonatomic, readonly, strong) UIColor * _Nonnull backgroundColor;
/// Tracking circle color.
@property (nonatomic, readonly, strong) UIColor * _Nonnull trackingCircleColor;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithBackgroundColor:(UIColor * _Nonnull)backgroundColor trackingCircleColor:(UIColor * _Nonnull)trackingCircleColor OBJC_DESIGNATED_INITIALIZER;
@end

@protocol DOTFaceSimpleCaptureViewControllerDelegate;

/// UI component for capturing face images.
/// This component requires <code>DotFaceDetection*</code> module to be active.
SWIFT_CLASS_NAMED("FaceSimpleCaptureViewController")
@interface DOTFaceSimpleCaptureViewController : UIViewController
/// Current configuration.
@property (nonatomic, readonly, strong) DOTFaceSimpleCaptureConfiguration * _Nonnull configuration;
/// Current style.
@property (nonatomic, readonly, strong) DOTFaceSimpleCaptureStyle * _Nonnull style;
/// Set this delegate to handle face simple capture events.
@property (nonatomic, weak) id <DOTFaceSimpleCaptureViewControllerDelegate> _Nullable delegate;
/// Create new instance of <code>FaceSimpleCaptureViewController</code>.
/// \param configuration Configure functionality.
///
/// \param style Customize user interface.
///
+ (DOTFaceSimpleCaptureViewController * _Nonnull)createWithConfiguration:(DOTFaceSimpleCaptureConfiguration * _Nonnull)configuration style:(DOTFaceSimpleCaptureStyle * _Nonnull)style SWIFT_WARN_UNUSED_RESULT;
/// Start face simple capture process.
- (void)start;
/// Stop face simple capture process asynchronously. Wait for delegate callback <code>faceSimpleCaptureViewControllerStopped()</code>.
- (void)stopAsync;
/// Request face capture.
- (void)requestCapture;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end






@interface DOTFaceSimpleCaptureViewController (SWIFT_EXTENSION(DotFaceCore))
- (void)viewDidLoad;
- (void)viewDidLayoutSubviews;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
- (void)viewDidDisappear:(BOOL)animated;
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
@end


/// Implement this delegate to handle face simple capture events.
SWIFT_PROTOCOL_NAMED("FaceSimpleCaptureViewControllerDelegate")
@protocol DOTFaceSimpleCaptureViewControllerDelegate
@optional
- (void)faceSimpleCaptureViewControllerViewDidLoad:(DOTFaceSimpleCaptureViewController * _Nonnull)viewController;
- (void)faceSimpleCaptureViewControllerViewDidLayoutSubviews:(DOTFaceSimpleCaptureViewController * _Nonnull)viewController;
- (void)faceSimpleCaptureViewControllerViewWillAppear:(DOTFaceSimpleCaptureViewController * _Nonnull)viewController;
- (void)faceSimpleCaptureViewControllerViewDidAppear:(DOTFaceSimpleCaptureViewController * _Nonnull)viewController;
- (void)faceSimpleCaptureViewControllerViewWillDisappear:(DOTFaceSimpleCaptureViewController * _Nonnull)viewController;
- (void)faceSimpleCaptureViewControllerViewDidDisappear:(DOTFaceSimpleCaptureViewController * _Nonnull)viewController;
- (void)faceSimpleCaptureViewControllerViewWillTransition:(DOTFaceSimpleCaptureViewController * _Nonnull)viewController;
/// Tells the delegate that you have no permission for camera usage.
- (void)faceSimpleCaptureViewControllerNoCameraPermission:(DOTFaceSimpleCaptureViewController * _Nonnull)viewController;
/// Tells the delegate that the component has stopped.
- (void)faceSimpleCaptureViewControllerStopped:(DOTFaceSimpleCaptureViewController * _Nonnull)viewController;
@required
/// Tells the delegate that the face was captured.
- (void)faceSimpleCaptureViewController:(DOTFaceSimpleCaptureViewController * _Nonnull)viewController captured:(DOTDetectedFace * _Nonnull)detectedFace;
@end


SWIFT_CLASS_NAMED("Glasses")
@interface DOTGlasses : NSObject
@property (nonatomic, readonly) double score;
@property (nonatomic, readonly) BOOL preconditionsMet;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithScore:(double)score preconditionsMet:(BOOL)preconditionsMet OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end

@class DOTHeadPoseAttribute;

SWIFT_CLASS_NAMED("HeadPose")
@interface DOTHeadPose : NSObject
@property (nonatomic, readonly, strong) DOTHeadPoseAttribute * _Nullable roll;
@property (nonatomic, readonly, strong) DOTHeadPoseAttribute * _Nullable yaw;
@property (nonatomic, readonly, strong) DOTHeadPoseAttribute * _Nullable pitch;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithRoll:(DOTHeadPoseAttribute * _Nullable)roll yaw:(DOTHeadPoseAttribute * _Nullable)yaw pitch:(DOTHeadPoseAttribute * _Nullable)pitch OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS_NAMED("HeadPoseAttribute")
@interface DOTHeadPoseAttribute : NSObject
@property (nonatomic, readonly) float angle;
@property (nonatomic, readonly) BOOL preconditionsMet;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithAngle:(float)angle preconditionsMet:(BOOL)preconditionsMet OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS_NAMED("HeadPoseQuery")
@interface DOTHeadPoseQuery : NSObject
@property (nonatomic, readonly) BOOL roll;
@property (nonatomic, readonly) BOOL yaw;
@property (nonatomic, readonly) BOOL pitch;
- (nonnull instancetype)init;
- (nonnull instancetype)initWithRoll:(BOOL)roll yaw:(BOOL)yaw pitch:(BOOL)pitch OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL_NAMED("QualityProvider")
@protocol DOTQualityProvider
- (NSSet<DOTQualityAttribute *> * _Nonnull)getQualityAttributes SWIFT_WARN_UNUSED_RESULT;
- (DOTQualityAttribute * _Nullable)findQualityAttributeById:(enum DOTQualityAttributeId)qualityAttributeId SWIFT_WARN_UNUSED_RESULT;
@end


/// This class provides set of <code>QualityAttribute</code> objects recommended for ICAO evaluation.
SWIFT_CLASS_NAMED("IcaoQualityProvider")
@interface DOTIcaoQualityProvider : NSObject <DOTQualityProvider>
/// Returns set of <code>QualityAttribute</code> objects configured for <code>QualityAttributePreset.verification</code>.
- (NSSet<DOTQualityAttribute *> * _Nonnull)getQualityAttributes SWIFT_WARN_UNUSED_RESULT;
/// Returns <code>QualityAttribute</code> object configured for <code>QualityAttributePreset.verification</code>.
/// \param qualityAttributeId Requested <code>QualityAttributeId</code>.
///
///
/// returns:
/// If this provider contains requested <code>QualityAttribute</code> it is returned, <code>nil</code> is returned otherwise.
- (DOTQualityAttribute * _Nullable)findQualityAttributeById:(enum DOTQualityAttributeId)qualityAttributeId SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Image size in pixels.
SWIFT_CLASS_NAMED("ImageSize")
@interface DOTImageSize : NSObject
@property (nonatomic, readonly) NSInteger width;
@property (nonatomic, readonly) NSInteger height;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithWidth:(NSInteger)width height:(NSInteger)height OBJC_DESIGNATED_INITIALIZER;
- (NSInteger)calculatePixelCount SWIFT_WARN_UNUSED_RESULT;
- (double)calculateWidthToHeightRatio SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
@end


/// Class responsible for the localization of user interface strings.
SWIFT_CLASS_NAMED("Localization")
@interface DotFaceLocalization : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// You can override default iOS localization mechanism by providing custom translation dictionary.
/// note:
/// You also need to set <code>useLocalizationDictionary</code> flag to <code>true</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSDictionary<NSString *, NSString *> * _Nullable localizationDictionary;)
+ (NSDictionary<NSString *, NSString *> * _Nullable)localizationDictionary SWIFT_WARN_UNUSED_RESULT;
+ (void)setLocalizationDictionary:(NSDictionary<NSString *, NSString *> * _Nullable)value;
/// If you set this to <code>true</code>, <code>localizationDictionary</code> will be used to localize strings. Default value is <code>false</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL useLocalizationDictionary;)
+ (BOOL)useLocalizationDictionary SWIFT_WARN_UNUSED_RESULT;
+ (void)setUseLocalizationDictionary:(BOOL)value;
/// Bundle used to localize strings.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) NSBundle * _Nonnull bundle;)
+ (NSBundle * _Nonnull)bundle SWIFT_WARN_UNUSED_RESULT;
+ (void)setBundle:(NSBundle * _Nonnull)value;
@end

enum DotFaceLoggerLogLevel : NSInteger;

/// Static class responsible for generating logs. You can configure log level.
SWIFT_CLASS_NAMED("Logger")
@interface DotFaceLogger : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Log level currently in use. Default value is <code>.none</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) enum DotFaceLoggerLogLevel logLevel;)
+ (enum DotFaceLoggerLogLevel)logLevel SWIFT_WARN_UNUSED_RESULT;
+ (void)setLogLevel:(enum DotFaceLoggerLogLevel)value;
+ (void)info:(NSString * _Nullable)message file:(NSString * _Nonnull)file function:(NSString * _Nonnull)function;
+ (void)debug:(NSString * _Nullable)message file:(NSString * _Nonnull)file function:(NSString * _Nonnull)function;
+ (void)warning:(NSString * _Nullable)message file:(NSString * _Nonnull)file function:(NSString * _Nonnull)function;
+ (void)error:(NSString * _Nullable)message file:(NSString * _Nonnull)file function:(NSString * _Nonnull)function;
@end

/// Available log levels.
typedef SWIFT_ENUM_NAMED(NSInteger, DotFaceLoggerLogLevel, "LogLevel", open) {
/// Logs informative events.
  DotFaceLoggerLogLevelInfo = 0,
/// Logs events suitable for debugging purposes.
  DotFaceLoggerLogLevelDebug = 1,
/// Logs unexpected events which indicate malfunction.
  DotFaceLoggerLogLevelWarning = 2,
/// Logs failed operations and other errors.
  DotFaceLoggerLogLevelError = 3,
/// Disables logging.
  DotFaceLoggerLogLevelNone = 4,
};


/// This class provides set of <code>QualityAttribute</code> objects recommended for matching.
SWIFT_CLASS_NAMED("MatchingQualityProvider")
@interface DOTMatchingQualityProvider : NSObject <DOTQualityProvider>
/// Returns set of <code>QualityAttribute</code> objects configured for <code>QualityAttributePreset.verification</code>.
- (NSSet<DOTQualityAttribute *> * _Nonnull)getQualityAttributes SWIFT_WARN_UNUSED_RESULT;
/// Returns <code>QualityAttribute</code> object configured for <code>QualityAttributePreset.verification</code>.
/// \param qualityAttributeId Requested <code>QualityAttributeId</code>.
///
///
/// returns:
/// If this provider contains requested <code>QualityAttribute</code> it is returned, <code>nil</code> is returned otherwise.
- (DOTQualityAttribute * _Nullable)findQualityAttributeById:(enum DOTQualityAttributeId)qualityAttributeId SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// This class provides set of <code>QualityAttribute</code> objects recommended for Passive Liveness evaluation.
SWIFT_CLASS_NAMED("PassiveLivenessQualityProvider")
@interface DOTPassiveLivenessQualityProvider : NSObject <DOTQualityProvider>
/// Returns set of <code>QualityAttribute</code> objects configured for <code>QualityAttributePreset.passiveLiveness</code>.
- (NSSet<DOTQualityAttribute *> * _Nonnull)getQualityAttributes SWIFT_WARN_UNUSED_RESULT;
/// Returns <code>QualityAttribute</code> object configured for <code>QualityAttributePreset.passiveLiveness</code>.
/// \param qualityAttributeId Requested <code>QualityAttributeId</code>.
///
///
/// returns:
/// If this provider contains requested <code>QualityAttribute</code> it is returned, <code>nil</code> is returned otherwise.
- (DOTQualityAttribute * _Nullable)findQualityAttributeById:(enum DOTQualityAttributeId)qualityAttributeId SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class DOTValueRange;

/// Quality attribute of the face capture result.
/// You can use this class to customize the ranges of quality attributes which are checked during the face capture process.
/// The result of the face capture process is guaranteed to satisfy <code>targetRange</code>.
/// The <code>strictRange</code> will be satisfied at least once (by at least one video frame) during the face capture process, but the result may not satisfy <code>strictRange</code>.
/// The <code>strictRange</code> must be entirely contained in <code>targetRange</code>.
SWIFT_CLASS_NAMED("QualityAttribute")
@interface DOTQualityAttribute : NSObject
@property (nonatomic, readonly) enum DOTQualityAttributeId qualityAttributeId;
@property (nonatomic, readonly, strong) DOTValueRange * _Nonnull targetRange;
@property (nonatomic, readonly, strong) DOTValueRange * _Nonnull strictRange;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nullable instancetype)initWithId:(enum DOTQualityAttributeId)id targetRange:(DOTValueRange * _Nonnull)targetRange strictRange:(DOTValueRange * _Nonnull)strictRange error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
@end

/// A value identifying the quality attribute of the face capture result.
typedef SWIFT_ENUM_NAMED(NSInteger, DOTQualityAttributeId, "QualityAttributeId", open) {
/// Valid values are in range [0.0, 1.0].
  DOTQualityAttributeIdPosition = 0,
/// Valid values are in [0.0, 1.0].
  DOTQualityAttributeIdProximity = 1,
/// Valid values are in range [0.0, 1.0].
  DOTQualityAttributeIdGlassStatus = 2,
/// Valid values are in range [0.0, 1.0].
  DOTQualityAttributeIdBackgroundUniformity = 3,
/// Valid values are in range [-180.0, 180.0].
  DOTQualityAttributeIdPitchAngle = 4,
/// Valid values are in range [-180.0, 180.0].
  DOTQualityAttributeIdYawAngle = 5,
/// Valid values are in range [0.0, 1.0].
  DOTQualityAttributeIdEyeStatus = 6,
/// Valid values are in range [0.0, 1.0].
  DOTQualityAttributeIdMouthStatus = 7,
/// Valid values are in range [0.0, 1.0].
  DOTQualityAttributeIdLight = 8,
/// Valid values are in range [0.0, 1.0].
  DOTQualityAttributeIdBrightness = 9,
/// Valid values are in range [0.0, 1.0].
  DOTQualityAttributeIdContrast = 10,
/// Valid values are in range [0.0, 1.0].
  DOTQualityAttributeIdShadow = 11,
/// Valid values are in range [0.0, 1.0].
  DOTQualityAttributeIdSharpness = 12,
/// Valid values are in range [0.0, 1.0].
  DOTQualityAttributeIdUniqueIntensityLevels = 13,
/// Valid values are in range [0.0, 1.0].
  DOTQualityAttributeIdFaceConfidence = 14,
/// Valid values are in range [0.0, 1.0].
  DOTQualityAttributeIdMask = 15,
};



SWIFT_PROTOCOL_NAMED("SegmentsGenerator")
@protocol DOTSegmentsGenerator
- (NSArray<DOTSegment *> * _Nonnull)generateWithSegmentCount:(NSInteger)segmentCount segmentDurationMillis:(NSInteger)segmentDurationMillis SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("RandomSegmentsGenerator")
@interface DOTRandomSegmentsGenerator : NSObject <DOTSegmentsGenerator>
- (NSArray<DOTSegment *> * _Nonnull)generateWithSegmentCount:(NSInteger)segmentCount segmentDurationMillis:(NSInteger)segmentDurationMillis SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum DOTSegmentCorner : NSInteger;

SWIFT_CLASS_NAMED("Segment")
@interface DOTSegment : NSObject
@property (nonatomic, readonly) enum DOTSegmentCorner targetCorner;
@property (nonatomic, readonly) NSInteger durationMillis;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithTargetCorner:(enum DOTSegmentCorner)targetCorner durationMillis:(NSInteger)durationMillis OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, DOTSegmentCorner, "Corner", open) {
  DOTSegmentCornerTopLeft = 0,
  DOTSegmentCornerTopRight = 1,
  DOTSegmentCornerBottomLeft = 2,
  DOTSegmentCornerBottomRight = 3,
};


SWIFT_CLASS_NAMED("SegmentImage")
@interface DOTSegmentImage : NSObject
@property (nonatomic, readonly, strong) DOTBgrRawImage * _Nonnull image;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithImage:(DOTBgrRawImage * _Nonnull)image;
@end


@class DOTTemplateVersion;

SWIFT_CLASS_NAMED("Template")
@interface DOTTemplate : NSObject
@property (nonatomic, readonly, strong) DOTTemplateVersion * _Nonnull version;
@property (nonatomic, copy) NSData * _Nonnull bytes;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithBytes:(NSData * _Nonnull)bytes version:(DOTTemplateVersion * _Nonnull)version;
@end


SWIFT_CLASS_NAMED("Version")
@interface DOTTemplateVersion : NSObject
@property (nonatomic, readonly) NSInteger major;
@property (nonatomic, readonly) NSInteger minor;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithMajor:(NSInteger)major minor:(NSInteger)minor OBJC_DESIGNATED_INITIALIZER;
@end

@class DOTTemplateMatcherResult;

/// Non-UI component for matching templates.
/// This component requires <code>DotFaceVerification</code> module to be active.
SWIFT_CLASS_NAMED("TemplateMatcher")
@interface DOTTemplateMatcher : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Match reference and probe face templates.
/// \param referenceTemplate Template
///
/// \param probeTemplate Template
///
///
/// returns:
/// Result with matching score.
- (DOTTemplateMatcherResult * _Nullable)matchWithReferenceTemplate:(DOTTemplate * _Nonnull)referenceTemplate probeTemplate:(DOTTemplate * _Nonnull)probeTemplate error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Match reference and probe face templates.
/// \param referenceTemplateBytes Reference template as <code>Data</code>.
///
/// \param probeTemplateBytes Probe template as <code>Data</code>.
///
///
/// returns:
/// Result with matching score.
- (DOTTemplateMatcherResult * _Nullable)matchWithReferenceTemplateBytes:(NSData * _Nonnull)referenceTemplateBytes probeTemplateBytes:(NSData * _Nonnull)probeTemplateBytes error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("Result")
@interface DOTTemplateMatcherResult : NSObject
@property (nonatomic, readonly) double score;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithScore:(double)score OBJC_DESIGNATED_INITIALIZER;
@end


enum DOTValueRangeStatus : NSInteger;

/// Representation of <code>Double</code> range, compatible with Objective-C.
/// The <code>max</code> must be greater than <code>min</code>.
SWIFT_CLASS_NAMED("ValueRange")
@interface DOTValueRange : NSObject
/// Minimal range value.
@property (nonatomic, readonly) double min;
/// Maximal range value.
@property (nonatomic, readonly) double max;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nullable instancetype)initWithMin:(double)min max:(double)max error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
/// Checks the status of <code>value</code> with respect to this range.
- (enum DOTValueRangeStatus)resolveStatusWithValue:(double)value SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
@end

/// Status of a value with respect to a range.
typedef SWIFT_ENUM_NAMED(NSInteger, DOTValueRangeStatus, "Status", open) {
  DOTValueRangeStatusInRange = 0,
  DOTValueRangeStatusTooLow = 1,
  DOTValueRangeStatusTooHigh = 2,
};


SWIFT_CLASS_NAMED("Wearables")
@interface DOTWearables : NSObject
@property (nonatomic, readonly, strong) DOTGlasses * _Nullable glasses;
@property (nonatomic, readonly, strong) DOTFaceAttribute * _Nullable mask;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithGlasses:(DOTGlasses * _Nullable)glasses mask:(DOTFaceAttribute * _Nullable)mask OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS_NAMED("WearablesQuery")
@interface DOTWearablesQuery : NSObject
@property (nonatomic, readonly) BOOL glasses;
@property (nonatomic, readonly) BOOL mask;
- (nonnull instancetype)init;
- (nonnull instancetype)initWithGlasses:(BOOL)glasses mask:(BOOL)mask OBJC_DESIGNATED_INITIALIZER;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#endif
